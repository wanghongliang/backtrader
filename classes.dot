digraph "classes" {
rankdir=BT
charset="utf-8"
"backtrader.stores.oandastore.API" [color="black", fontcolor="black", label=<{API|<br ALIGN="LEFT"/>|request(endpoint, method, params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feed.AbstractDataBase" [color="black", fontcolor="black", label=<{AbstractDataBase|CONNBROKEN<br ALIGN="LEFT"/>CONNECTED<br ALIGN="LEFT"/>DELAYED<br ALIGN="LEFT"/>DISCONNECTED<br ALIGN="LEFT"/>LIVE<br ALIGN="LEFT"/>NOTSUBSCRIBED<br ALIGN="LEFT"/>NOTSUPPORTED_TF<br ALIGN="LEFT"/>UNKNOWN<br ALIGN="LEFT"/>fromdate : float<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>replaying : int<br ALIGN="LEFT"/>resampling : int<br ALIGN="LEFT"/>sessionend<br ALIGN="LEFT"/>sessionstart<br ALIGN="LEFT"/>tick_last : NoneType<br ALIGN="LEFT"/>todate : float<br ALIGN="LEFT"/>|addfilter(p)<br ALIGN="LEFT"/>addfilter_simple(f)<br ALIGN="LEFT"/>advance(size, datamaster, ticks)<br ALIGN="LEFT"/>advance_peek()<br ALIGN="LEFT"/>clone()<br ALIGN="LEFT"/>compensate(other)<br ALIGN="LEFT"/>copyas(_dataname)<br ALIGN="LEFT"/>date2num(dt)<br ALIGN="LEFT"/>do_qcheck(onoff, qlapse)<br ALIGN="LEFT"/>get_notifications()<br ALIGN="LEFT"/>getenvironment()<br ALIGN="LEFT"/>getfeed()<br ALIGN="LEFT"/>haslivedata()<br ALIGN="LEFT"/>islive()<br ALIGN="LEFT"/>load()<br ALIGN="LEFT"/>next(datamaster, ticks)<br ALIGN="LEFT"/>num2date(dt, tz, naive)<br ALIGN="LEFT"/>preload()<br ALIGN="LEFT"/>put_notification(status)<br ALIGN="LEFT"/>qbuffer(savemem, replaying)<br ALIGN="LEFT"/>replay()<br ALIGN="LEFT"/>resample()<br ALIGN="LEFT"/>setenvironment(env)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.accdecoscillator.AccelerationDecelerationOscillator" [color="black", fontcolor="black", label=<{AccelerationDecelerationOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.Accum" [color="black", fontcolor="black", label=<{Accum|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>oncestart(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.kama.AdaptiveMovingAverage" [color="black", fontcolor="black", label=<{AdaptiveMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.All" [color="black", fontcolor="black", label=<{All|flogic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.sizers.percents_sizer.AllInSizer" [color="black", fontcolor="black", label=<{AllInSizer|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.sizers.percents_sizer.AllInSizerInt" [color="black", fontcolor="black", label=<{AllInSizerInt|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.AllN" [color="black", fontcolor="black", label=<{AllN|func<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzer.Analyzer" [color="black", fontcolor="black", label=<{Analyzer|csv : bool<br ALIGN="LEFT"/>rets : OrderedDict<br ALIGN="LEFT"/>|create_analysis()<br ALIGN="LEFT"/>get_analysis()<br ALIGN="LEFT"/><I>next</I>()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/><I>notify_cashvalue</I>(cash, value)<br ALIGN="LEFT"/><I>notify_fund</I>(cash, value, fundvalue, shares)<br ALIGN="LEFT"/><I>notify_order</I>(order)<br ALIGN="LEFT"/><I>notify_trade</I>(trade)<br ALIGN="LEFT"/>pprint()<br ALIGN="LEFT"/>prenext()<br ALIGN="LEFT"/>print()<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.And" [color="black", fontcolor="black", label=<{And|flogic : staticmethod<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.annualreturn.AnnualReturn" [color="black", fontcolor="black", label=<{AnnualReturn|ret : OrderedDict<br ALIGN="LEFT"/>rets : list<br ALIGN="LEFT"/>|get_analysis()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.Any" [color="black", fontcolor="black", label=<{Any|flogic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.AnyN" [color="black", fontcolor="black", label=<{AnyN|func<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.ApplyN" [color="black", fontcolor="black", label=<{ApplyN|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.aroon.AroonDown" [color="black", fontcolor="black", label=<{AroonDown|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.aroon.AroonOscillator" [color="black", fontcolor="black", label=<{AroonOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.aroon.AroonUp" [color="black", fontcolor="black", label=<{AroonUp|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.aroon.AroonUpDown" [color="black", fontcolor="black", label=<{AroonUpDown|alias : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.aroon.AroonUpDownOscillator" [color="black", fontcolor="black", label=<{AroonUpDownOscillator|alias : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.locator.AutoDateFormatter" [color="black", fontcolor="black", label=<{AutoDateFormatter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.locator.AutoDateLocator" [color="black", fontcolor="black", label=<{AutoDateLocator|<br ALIGN="LEFT"/>|datalim_to_dt()<br ALIGN="LEFT"/>get_locator(dmin, dmax)<br ALIGN="LEFT"/>tick_values(vmin, vmax)<br ALIGN="LEFT"/>viewlim_to_dt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.utils.autodict.AutoDict" [color="black", fontcolor="black", label=<{AutoDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.utils.autodict.AutoDictList" [color="black", fontcolor="black", label=<{AutoDictList|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.metabase.AutoInfoClass" [color="black", fontcolor="black", label=<{AutoInfoClass|<br ALIGN="LEFT"/>|isdefault(pname)<br ALIGN="LEFT"/>notdefault(pname)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.utils.autodict.AutoOrderedDict" [color="black", fontcolor="black", label=<{AutoOrderedDict|<br ALIGN="LEFT"/>|lvalues()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.Average" [color="black", fontcolor="black", label=<{Average|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.AverageDirectionalMovementIndex" [color="black", fontcolor="black", label=<{AverageDirectionalMovementIndex|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.AverageDirectionalMovementIndexRating" [color="black", fontcolor="black", label=<{AverageDirectionalMovementIndexRating|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.atr.AverageTrueRange" [color="black", fontcolor="black", label=<{AverageTrueRange|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.awesomeoscillator.AwesomeOscillator" [color="black", fontcolor="black", label=<{AwesomeOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.bbroker.BackBroker" [color="black", fontcolor="black", label=<{BackBroker|cash : NoneType<br ALIGN="LEFT"/>d_credit : defaultdict<br ALIGN="LEFT"/>fundmode<br ALIGN="LEFT"/>fundshares<br ALIGN="LEFT"/>fundvalue<br ALIGN="LEFT"/>getcash<br ALIGN="LEFT"/>getvalue<br ALIGN="LEFT"/>notifs : deque<br ALIGN="LEFT"/>orders : list<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>pending : deque<br ALIGN="LEFT"/>positions : defaultdict<br ALIGN="LEFT"/>setcash<br ALIGN="LEFT"/>seteosbar<br ALIGN="LEFT"/>startingcash<br ALIGN="LEFT"/>submitted : deque<br ALIGN="LEFT"/>|add_cash(cash)<br ALIGN="LEFT"/>add_order_history(orders, notify)<br ALIGN="LEFT"/>buy(owner, data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent, parent, transmit, histnotify, _checksubmit)<br ALIGN="LEFT"/>cancel(order, bracket)<br ALIGN="LEFT"/>check_submitted()<br ALIGN="LEFT"/>get_cash()<br ALIGN="LEFT"/>get_fundmode()<br ALIGN="LEFT"/>get_fundshares()<br ALIGN="LEFT"/>get_fundvalue()<br ALIGN="LEFT"/>get_leverage()<br ALIGN="LEFT"/>get_notification()<br ALIGN="LEFT"/>get_orders_open(safe)<br ALIGN="LEFT"/>get_value(datas, mkt, lever)<br ALIGN="LEFT"/>get_value_lever(datas, mkt)<br ALIGN="LEFT"/>getposition(data)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>notify(order)<br ALIGN="LEFT"/>orderstatus(order)<br ALIGN="LEFT"/>sell(owner, data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent, parent, transmit, histnotify, _checksubmit)<br ALIGN="LEFT"/>set_cash(cash)<br ALIGN="LEFT"/>set_checksubmit(checksubmit)<br ALIGN="LEFT"/>set_coc(coc)<br ALIGN="LEFT"/>set_coo(coo)<br ALIGN="LEFT"/>set_eosbar(eosbar)<br ALIGN="LEFT"/>set_filler(filler)<br ALIGN="LEFT"/>set_fund_history(fund)<br ALIGN="LEFT"/>set_fundmode(fundmode, fundstartval)<br ALIGN="LEFT"/>set_fundstartval(fundstartval)<br ALIGN="LEFT"/>set_int2pnl(int2pnl)<br ALIGN="LEFT"/>set_shortcash(shortcash)<br ALIGN="LEFT"/>set_slippage_fixed(fixed, slip_open, slip_limit, slip_match, slip_out)<br ALIGN="LEFT"/>set_slippage_perc(perc, slip_open, slip_limit, slip_match, slip_out)<br ALIGN="LEFT"/>submit(order, check)<br ALIGN="LEFT"/>submit_accept(order)<br ALIGN="LEFT"/>transmit(order, check)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.btcsv.BacktraderCSV" [color="black", fontcolor="black", label=<{BacktraderCSV|DataCls<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.btcsv.BacktraderCSVData" [color="black", fontcolor="black", label=<{BacktraderCSVData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.errors.BacktraderError" [color="black", fontcolor="red", label=<{BacktraderError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.fillers.BarPointPerc" [color="black", fontcolor="black", label=<{BarPointPerc|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.filters.daysteps.BarReplayer_Open" [color="black", fontcolor="black", label=<{BarReplayer_Open|pendingbar : NoneType<br ALIGN="LEFT"/>|last(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.BaseApplyN" [color="black", fontcolor="black", label=<{BaseApplyN|func<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observers.benchmark.Benchmark" [color="black", fontcolor="black", label=<{Benchmark|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>tbench<br ALIGN="LEFT"/>treturn<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>prenext()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.blaze.BlazeData" [color="black", fontcolor="black", label=<{BlazeData|datafields : list<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.bollinger.BollingerBands" [color="black", fontcolor="black", label=<{BollingerBands|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.bollinger.BollingerBandsPct" [color="black", fontcolor="black", label=<{BollingerBandsPct|lines : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observers.broker.Broker" [color="black", fontcolor="black", label=<{Broker|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.broker.BrokerBase" [color="black", fontcolor="black", label=<{BrokerBase|comminfo : dict<br ALIGN="LEFT"/>fundmode<br ALIGN="LEFT"/>fundshares<br ALIGN="LEFT"/>fundvalue<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|<I>add_order_history</I>(orders, notify)<br ALIGN="LEFT"/>addcommissioninfo(comminfo, name)<br ALIGN="LEFT"/><I>buy</I>(owner, data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent)<br ALIGN="LEFT"/><I>cancel</I>(order)<br ALIGN="LEFT"/>get_fundmode()<br ALIGN="LEFT"/>get_fundshares()<br ALIGN="LEFT"/>get_fundvalue()<br ALIGN="LEFT"/><I>getcash</I>()<br ALIGN="LEFT"/>getcommissioninfo(data)<br ALIGN="LEFT"/><I>getposition</I>(data)<br ALIGN="LEFT"/><I>getvalue</I>(datas)<br ALIGN="LEFT"/>init()<br ALIGN="LEFT"/><I>next</I>()<br ALIGN="LEFT"/><I>sell</I>(owner, data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent)<br ALIGN="LEFT"/><I>set_fund_history</I>(fund)<br ALIGN="LEFT"/><I>set_fundmode</I>(fundmode, fundstartval)<br ALIGN="LEFT"/>setcommission(commission, margin, mult, commtype, percabs, stocklike, interest, interest_long, leverage, automargin, name)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/><I>submit</I>(order)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.order.BuyOrder" [color="black", fontcolor="black", label=<{BuyOrder|ordtype<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observers.buysell.BuySell" [color="black", fontcolor="black", label=<{BuySell|curbuylen : int<br ALIGN="LEFT"/>curselllen : int<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feed.CSVDataBase" [color="black", fontcolor="black", label=<{CSVDataBase|f : NoneType<br ALIGN="LEFT"/>f : NoneType<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>separator<br ALIGN="LEFT"/>|preload()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feed.CSVFeedBase" [color="black", fontcolor="black", label=<{CSVFeedBase|params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.filters.calendardays.CalendarDays" [color="black", fontcolor="black", label=<{CalendarDays|ONEDAY : timedelta<br ALIGN="LEFT"/>lastdt<br ALIGN="LEFT"/>lastdt : date<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.calmar.Calmar" [color="black", fontcolor="black", label=<{Calmar|calmar<br ALIGN="LEFT"/>packages : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|on_dt_over()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.finance.CandlestickPlotHandler" [color="black", fontcolor="black", label=<{CandlestickPlotHandler|barcol : PolyCollection<br ALIGN="LEFT"/>colordown : tuple<br ALIGN="LEFT"/>colorup : tuple<br ALIGN="LEFT"/>edgedown : tuple<br ALIGN="LEFT"/>edgeup : tuple<br ALIGN="LEFT"/>legend_closes : list<br ALIGN="LEFT"/>legend_highs : list<br ALIGN="LEFT"/>legend_lows : list<br ALIGN="LEFT"/>legend_opens : list<br ALIGN="LEFT"/>tickcol : LineCollection<br ALIGN="LEFT"/>tickdown : tuple<br ALIGN="LEFT"/>tickup : tuple<br ALIGN="LEFT"/>|barcollection(xs, opens, highs, lows, closes, width, tickwidth, edgeadjust, label, scaling, bot, fillup, filldown)<br ALIGN="LEFT"/>legend_artist(legend, orig_handle, fontsize, handlebox)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.broker.Cash" [color="black", fontcolor="black", label=<{Cash|lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.cerebro.Cerebro" [color="black", fontcolor="black", label=<{Cerebro|analyzers : list<br ALIGN="LEFT"/>broker<br ALIGN="LEFT"/>datacbs : list<br ALIGN="LEFT"/>datas : list<br ALIGN="LEFT"/>datasbyname : OrderedDict<br ALIGN="LEFT"/>feeds : list<br ALIGN="LEFT"/>indicators : list<br ALIGN="LEFT"/>observers : list<br ALIGN="LEFT"/>optcbs : list<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>runningstrats : list<br ALIGN="LEFT"/>runstrats : list<br ALIGN="LEFT"/>runwriters : list<br ALIGN="LEFT"/>signals : list<br ALIGN="LEFT"/>sizers : dict<br ALIGN="LEFT"/>stcount : count<br ALIGN="LEFT"/>storecbs : list<br ALIGN="LEFT"/>stores : list<br ALIGN="LEFT"/>strats : list<br ALIGN="LEFT"/>writers : list<br ALIGN="LEFT"/>writers_csv<br ALIGN="LEFT"/>|add_order_history(orders, notify)<br ALIGN="LEFT"/>add_signal(sigtype, sigcls)<br ALIGN="LEFT"/>add_timer(when, offset, repeat, weekdays, weekcarry, monthdays, monthcarry, allow, tzdata, strats, cheat)<br ALIGN="LEFT"/>addanalyzer(ancls)<br ALIGN="LEFT"/>addcalendar(cal)<br ALIGN="LEFT"/>adddata(data, name)<br ALIGN="LEFT"/>adddatacb(callback)<br ALIGN="LEFT"/>addindicator(indcls)<br ALIGN="LEFT"/>addobserver(obscls)<br ALIGN="LEFT"/>addobservermulti(obscls)<br ALIGN="LEFT"/>addsizer(sizercls)<br ALIGN="LEFT"/>addsizer_byidx(idx, sizercls)<br ALIGN="LEFT"/>addstore(store)<br ALIGN="LEFT"/>addstorecb(callback)<br ALIGN="LEFT"/>addstrategy(strategy)<br ALIGN="LEFT"/>addtz(tz)<br ALIGN="LEFT"/>addwriter(wrtcls)<br ALIGN="LEFT"/>chaindata()<br ALIGN="LEFT"/>getbroker()<br ALIGN="LEFT"/>iterize(iterable)<br ALIGN="LEFT"/><I>notify_data</I>(data, status)<br ALIGN="LEFT"/><I>notify_store</I>(msg)<br ALIGN="LEFT"/><I>notify_timer</I>(timer, when)<br ALIGN="LEFT"/>optcallback(cb)<br ALIGN="LEFT"/>optstrategy(strategy)<br ALIGN="LEFT"/>plot(plotter, numfigs, iplot, start, end, width, height, dpi, tight, use)<br ALIGN="LEFT"/>replaydata(dataname, name)<br ALIGN="LEFT"/>resampledata(dataname, name)<br ALIGN="LEFT"/>rolloverdata()<br ALIGN="LEFT"/>run()<br ALIGN="LEFT"/>runstop()<br ALIGN="LEFT"/>runstrategies(iterstrat, predata)<br ALIGN="LEFT"/>set_fund_history(fund)<br ALIGN="LEFT"/>setbroker(broker)<br ALIGN="LEFT"/>signal_accumulate(onoff)<br ALIGN="LEFT"/>signal_concurrent(onoff)<br ALIGN="LEFT"/>signal_strategy(stratcls)<br ALIGN="LEFT"/>stop_writers(runstrats)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.chainer.Chainer" [color="black", fontcolor="black", label=<{Chainer|<br ALIGN="LEFT"/>|get_notifications()<br ALIGN="LEFT"/>islive()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.Cmp" [color="black", fontcolor="black", label=<{Cmp|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.CmpEx" [color="black", fontcolor="black", label=<{CmpEx|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>r1<br ALIGN="LEFT"/>r2<br ALIGN="LEFT"/>r3<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.ols.CointN" [color="black", fontcolor="black", label=<{CointN|frompackages : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>packages : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo" [color="black", fontcolor="black", label=<{CommInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.comminfo.CommInfoBase" [color="black", fontcolor="black", label=<{CommInfoBase|COMM_FIXED<br ALIGN="LEFT"/>COMM_PERC<br ALIGN="LEFT"/>margin<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>stocklike<br ALIGN="LEFT"/>|cashadjust(size, price, newprice)<br ALIGN="LEFT"/>confirmexec(size, price)<br ALIGN="LEFT"/>get_credit_interest(data, pos, dt)<br ALIGN="LEFT"/>get_leverage()<br ALIGN="LEFT"/>get_margin(price)<br ALIGN="LEFT"/>getcommission(size, price)<br ALIGN="LEFT"/>getoperationcost(size, price)<br ALIGN="LEFT"/>getsize(price, cash)<br ALIGN="LEFT"/>getvalue(position, price)<br ALIGN="LEFT"/>getvaluesize(size, price)<br ALIGN="LEFT"/>profitandloss(size, price, newprice)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo_Futures" [color="black", fontcolor="black", label=<{CommInfo_Futures|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo_Futures_Fixed" [color="black", fontcolor="black", label=<{CommInfo_Futures_Fixed|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo_Futures_Perc" [color="black", fontcolor="black", label=<{CommInfo_Futures_Perc|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo_Stocks" [color="black", fontcolor="black", label=<{CommInfo_Stocks|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo_Stocks_Fixed" [color="black", fontcolor="black", label=<{CommInfo_Stocks_Fixed|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.commissions.CommInfo_Stocks_Perc" [color="black", fontcolor="black", label=<{CommInfo_Stocks_Perc|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.comminfo.CommissionInfo" [color="black", fontcolor="black", label=<{CommissionInfo|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.cci.CommodityChannelIndex" [color="black", fontcolor="black", label=<{CommodityChannelIndex|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.crossover.CrossDown" [color="black", fontcolor="black", label=<{CrossDown|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.crossover.CrossOver" [color="black", fontcolor="black", label=<{CrossOver|lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.crossover.CrossUp" [color="black", fontcolor="black", label=<{CrossUp|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.DTFaker" [color="black", fontcolor="black", label=<{DTFaker|data<br ALIGN="LEFT"/>datetime<br ALIGN="LEFT"/>p<br ALIGN="LEFT"/>sessionend<br ALIGN="LEFT"/>|date(idx)<br ALIGN="LEFT"/>date2num()<br ALIGN="LEFT"/>datetime(idx)<br ALIGN="LEFT"/>num2date()<br ALIGN="LEFT"/>time(idx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.dv2.DV2" [color="black", fontcolor="black", label=<{DV2|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.lineiterator.DataAccessor" [color="black", fontcolor="black", label=<{DataAccessor|PriceClose<br ALIGN="LEFT"/>PriceDateTime<br ALIGN="LEFT"/>PriceHigh<br ALIGN="LEFT"/>PriceLow<br ALIGN="LEFT"/>PriceOpen<br ALIGN="LEFT"/>PriceOpenInteres<br ALIGN="LEFT"/>PriceVolume<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feed.DataBase" [color="black", fontcolor="black", label=<{DataBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feed.DataClone" [color="black", fontcolor="black", label=<{DataClone|data<br ALIGN="LEFT"/>fromdate<br ALIGN="LEFT"/>sessionend<br ALIGN="LEFT"/>sessionstart<br ALIGN="LEFT"/>todate<br ALIGN="LEFT"/>|advance(size, datamaster, ticks)<br ALIGN="LEFT"/>preload()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.filters.datafiller.DataFiller" [color="black", fontcolor="black", label=<{DataFiller|params : tuple<br ALIGN="LEFT"/>|preload()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.filters.datafilter.DataFilter" [color="black", fontcolor="black", label=<{DataFilter|params : tuple<br ALIGN="LEFT"/>|preload()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.dataseries.DataSeries" [color="black", fontcolor="black", label=<{DataSeries|Close<br ALIGN="LEFT"/>DateTime<br ALIGN="LEFT"/>High<br ALIGN="LEFT"/>LineOrder : list<br ALIGN="LEFT"/>Low<br ALIGN="LEFT"/>Open<br ALIGN="LEFT"/>OpenInterest<br ALIGN="LEFT"/>Volume<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|getwriterheaders()<br ALIGN="LEFT"/>getwriterinfo()<br ALIGN="LEFT"/>getwritervalues()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.trades.DataTrades" [color="black", fontcolor="black", label=<{DataTrades|params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.filters.bsplitter.DaySplitter_Close" [color="black", fontcolor="black", label=<{DaySplitter_Close|lastdt : NoneType<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.pivotpoint.DemarkPivotPoint" [color="black", fontcolor="black", label=<{DemarkPivotPoint|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.dpo.DetrendedPriceOscillator" [color="black", fontcolor="black", label=<{DetrendedPriceOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.dma.DicksonMovingAverage" [color="black", fontcolor="black", label=<{DicksonMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.DirectionalIndicator" [color="black", fontcolor="black", label=<{DirectionalIndicator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.DirectionalMovement" [color="black", fontcolor="black", label=<{DirectionalMovement|alias : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.DirectionalMovementIndex" [color="black", fontcolor="black", label=<{DirectionalMovementIndex|alias : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.DivByZero" [color="black", fontcolor="black", label=<{DivByZero|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>zero : float<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.DivZeroByZero" [color="black", fontcolor="black", label=<{DivZeroByZero|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>dual : float<br ALIGN="LEFT"/>single : float<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.utils.autodict.DotDict" [color="black", fontcolor="black", label=<{DotDict|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.dema.DoubleExponentialMovingAverage" [color="black", fontcolor="black", label=<{DoubleExponentialMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.DownDay" [color="black", fontcolor="black", label=<{DownDay|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.DownDayBool" [color="black", fontcolor="black", label=<{DownDayBool|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.DownMove" [color="black", fontcolor="black", label=<{DownMove|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.drawdown.DrawDown" [color="black", fontcolor="black", label=<{DrawDown|params : tuple<br ALIGN="LEFT"/>rets : AutoOrderedDict<br ALIGN="LEFT"/>|create_analysis()<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>notify_fund(cash, value, fundvalue, shares)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.drawdown.DrawDown" [color="black", fontcolor="black", label=<{DrawDown|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.drawdown.DrawDownLength" [color="black", fontcolor="black", label=<{DrawDownLength|lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.drawdown.DrawDown_Old" [color="black", fontcolor="black", label=<{DrawDown_Old|lines : tuple<br ALIGN="LEFT"/>maxdd : float<br ALIGN="LEFT"/>peak : float<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.envelope.Envelope" [color="black", fontcolor="black", label=<{Envelope|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.envelope.EnvelopeMixIn" [color="black", fontcolor="black", label=<{EnvelopeMixIn|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.ema.ExponentialMovingAverage" [color="black", fontcolor="black", label=<{ExponentialMovingAverage|alias : tuple<br ALIGN="LEFT"/>alpha<br ALIGN="LEFT"/>alpha1<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.ExponentialSmoothing" [color="black", fontcolor="black", label=<{ExponentialSmoothing|alias : tuple<br ALIGN="LEFT"/>alpha<br ALIGN="LEFT"/>alpha1<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>oncestart(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.ExponentialSmoothingDynamic" [color="black", fontcolor="black", label=<{ExponentialSmoothingDynamic|alias : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feed.FeedBase" [color="black", fontcolor="black", label=<{FeedBase|datas : list<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|getdata(dataname, name)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.pivotpoint.FibonacciPivotPoint" [color="black", fontcolor="black", label=<{FibonacciPivotPoint|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.flt.Filter" [color="black", fontcolor="black", label=<{Filter|<br ALIGN="LEFT"/>|<I>next</I>(data)<br ALIGN="LEFT"/><I>nextstart</I>(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.FindFirstIndex" [color="black", fontcolor="black", label=<{FindFirstIndex|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|func(iterable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.FindFirstIndexHighest" [color="black", fontcolor="black", label=<{FindFirstIndexHighest|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.FindFirstIndexLowest" [color="black", fontcolor="black", label=<{FindFirstIndexLowest|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.FindLastIndex" [color="black", fontcolor="black", label=<{FindLastIndex|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|func(iterable)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.FindLastIndexHighest" [color="black", fontcolor="black", label=<{FindLastIndexHighest|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.FindLastIndexLowest" [color="black", fontcolor="black", label=<{FindLastIndexLowest|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.fillers.FixedBarPerc" [color="black", fontcolor="black", label=<{FixedBarPerc|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.sizers.fixedsize.FixedReverser" [color="black", fontcolor="black", label=<{FixedReverser|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.fillers.FixedSize" [color="black", fontcolor="black", label=<{FixedSize|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.sizers.fixedsize.FixedSize" [color="black", fontcolor="black", label=<{FixedSize|params : tuple<br ALIGN="LEFT"/>|setsizing(stake)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.sizers.fixedsize.FixedSizeTarget" [color="black", fontcolor="black", label=<{FixedSizeTarget|params : tuple<br ALIGN="LEFT"/>|setsizing(stake)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.studies.contrib.fractal.Fractal" [color="black", fontcolor="black", label=<{Fractal|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.errors.FromModuleImportError" [color="black", fontcolor="red", label=<{FromModuleImportError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observers.broker.FundShares" [color="black", fontcolor="black", label=<{FundShares|lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.broker.FundValue" [color="black", fontcolor="black", label=<{FundValue|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.csvgeneric.GenericCSV" [color="black", fontcolor="black", label=<{GenericCSV|DataCls<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.csvgeneric.GenericCSVData" [color="black", fontcolor="black", label=<{GenericCSVData|params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.leverage.GrossLeverage" [color="black", fontcolor="black", label=<{GrossLeverage|params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>notify_fund(cash, value, fundvalue, shares)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.filters.heikinashi.HeikinAshi" [color="black", fontcolor="black", label=<{HeikinAshi|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.heikinashi.HeikinAshi" [color="black", fontcolor="black", label=<{HeikinAshi|linealias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|prenext()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.basicops.Highest" [color="black", fontcolor="black", label=<{Highest|alias : tuple<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.hma.HullMovingAverage" [color="black", fontcolor="black", label=<{HullMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.hurst.HurstExponent" [color="black", fontcolor="black", label=<{HurstExponent|alias : tuple<br ALIGN="LEFT"/>frompackages : tuple<br ALIGN="LEFT"/>lags<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>log10lags<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.brokers.ibbroker.IBBroker" [color="black", fontcolor="black", label=<{IBBroker|CANCELLED : str<br ALIGN="LEFT"/>FILLED : str<br ALIGN="LEFT"/>INACTIVE : str<br ALIGN="LEFT"/>PENDINGCANCEL : str<br ALIGN="LEFT"/>PENDINGSUBMIT : str<br ALIGN="LEFT"/>PRESUBMITTED : str<br ALIGN="LEFT"/>SUBMITTED : str<br ALIGN="LEFT"/>cash : float<br ALIGN="LEFT"/>executions : dict<br ALIGN="LEFT"/>ib<br ALIGN="LEFT"/>notifs : Queue<br ALIGN="LEFT"/>orderbyid : dict<br ALIGN="LEFT"/>ordstatus : defaultdict<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>startingcash : float<br ALIGN="LEFT"/>startingvalue : float<br ALIGN="LEFT"/>tonotify : deque<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|buy(owner, data, size, price, plimit, exectype, valid, tradeid)<br ALIGN="LEFT"/>cancel(order)<br ALIGN="LEFT"/>get_notification()<br ALIGN="LEFT"/>getcash()<br ALIGN="LEFT"/>getcommissioninfo(data)<br ALIGN="LEFT"/>getposition(data, clone)<br ALIGN="LEFT"/>getvalue(datas)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>notify(order)<br ALIGN="LEFT"/>orderstatus(order)<br ALIGN="LEFT"/>push_commissionreport(cr)<br ALIGN="LEFT"/>push_execution(ex)<br ALIGN="LEFT"/>push_ordererror(msg)<br ALIGN="LEFT"/>push_orderstate(msg)<br ALIGN="LEFT"/>push_orderstatus(msg)<br ALIGN="LEFT"/>push_portupdate()<br ALIGN="LEFT"/>sell(owner, data, size, price, plimit, exectype, valid, tradeid)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>submit(order)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.brokers.ibbroker.IBCommInfo" [color="black", fontcolor="black", label=<{IBCommInfo|<br ALIGN="LEFT"/>|getoperationcost(size, price)<br ALIGN="LEFT"/>getvaluesize(size, price)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.ibdata.IBData" [color="black", fontcolor="black", label=<{IBData|RTBAR_MINSIZE : tuple<br ALIGN="LEFT"/>contract : NoneType<br ALIGN="LEFT"/>contractdetails : NoneType<br ALIGN="LEFT"/>ib<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>precontract : NoneType<br ALIGN="LEFT"/>pretradecontract : NoneType<br ALIGN="LEFT"/>qhist : NoneType<br ALIGN="LEFT"/>qlive<br ALIGN="LEFT"/>tradecontract : NoneType<br ALIGN="LEFT"/>tradecontractdetails : NoneType<br ALIGN="LEFT"/>|canceldata()<br ALIGN="LEFT"/>haslivedata()<br ALIGN="LEFT"/>islive()<br ALIGN="LEFT"/>parsecontract(dataname)<br ALIGN="LEFT"/>reqdata()<br ALIGN="LEFT"/>setenvironment(env)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.brokers.ibbroker.IBOrder" [color="black", fontcolor="black", label=<{IBOrder|m_action : bytes, str<br ALIGN="LEFT"/>m_auxPrice : float<br ALIGN="LEFT"/>m_goodTillDate : bytes, str<br ALIGN="LEFT"/>m_lmtPrice : float<br ALIGN="LEFT"/>m_ocaType : int<br ALIGN="LEFT"/>m_orderType<br ALIGN="LEFT"/>m_parentId<br ALIGN="LEFT"/>m_permid : int<br ALIGN="LEFT"/>m_tif : str, bytes<br ALIGN="LEFT"/>m_totalQuantity<br ALIGN="LEFT"/>m_trailStopPrice<br ALIGN="LEFT"/>m_trailingPercent<br ALIGN="LEFT"/>m_transmit<br ALIGN="LEFT"/>ordtype<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.ibbroker.IBOrderState" [color="black", fontcolor="black", label=<{IBOrderState|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.ibstore.IBStore" [color="black", fontcolor="black", label=<{IBStore|BrokerCls : NoneType<br ALIGN="LEFT"/>DataCls : NoneType<br ALIGN="LEFT"/>REQIDBASE : int<br ALIGN="LEFT"/>acc_cash : AutoDict<br ALIGN="LEFT"/>acc_upds : AutoDict<br ALIGN="LEFT"/>acc_value : AutoDict<br ALIGN="LEFT"/>broker : NoneType<br ALIGN="LEFT"/>ccount : int<br ALIGN="LEFT"/>cdetails : defaultdict<br ALIGN="LEFT"/>clientId : int<br ALIGN="LEFT"/>conn<br ALIGN="LEFT"/>datas : list<br ALIGN="LEFT"/>dontreconnect : bool<br ALIGN="LEFT"/>histexreq : dict<br ALIGN="LEFT"/>histfmt : dict<br ALIGN="LEFT"/>histsend : dict<br ALIGN="LEFT"/>histtz : dict<br ALIGN="LEFT"/>iscash : dict<br ALIGN="LEFT"/>managed_accounts : list<br ALIGN="LEFT"/>notifs : Queue<br ALIGN="LEFT"/>orderid : NoneType, count<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>port_update : bool<br ALIGN="LEFT"/>positions : defaultdict<br ALIGN="LEFT"/>qs : OrderedDict<br ALIGN="LEFT"/>revdur : defaultdict<br ALIGN="LEFT"/>tmoffset : timedelta<br ALIGN="LEFT"/>ts : OrderedDict<br ALIGN="LEFT"/>|accountDownloadEnd(msg)<br ALIGN="LEFT"/>calcduration(dtbegin, dtend)<br ALIGN="LEFT"/>calcdurations(dtbegin, dtend)<br ALIGN="LEFT"/>cancelHistoricalData(q)<br ALIGN="LEFT"/>cancelMktData(q)<br ALIGN="LEFT"/>cancelOrder(orderid)<br ALIGN="LEFT"/>cancelQueue(q, sendnone)<br ALIGN="LEFT"/>cancelRealTimeBars(q)<br ALIGN="LEFT"/>commissionReport(msg)<br ALIGN="LEFT"/>connected()<br ALIGN="LEFT"/>connectionClosed(msg)<br ALIGN="LEFT"/>contractDetails(msg)<br ALIGN="LEFT"/>contractDetailsEnd(msg)<br ALIGN="LEFT"/>currentTime(msg)<br ALIGN="LEFT"/>dt_plus_duration(dt, duration)<br ALIGN="LEFT"/>error(msg)<br ALIGN="LEFT"/>execDetails(msg)<br ALIGN="LEFT"/>getContractDetails(contract, maxcount)<br ALIGN="LEFT"/>getTickerQueue(start)<br ALIGN="LEFT"/>get_acc_cash(account)<br ALIGN="LEFT"/>get_acc_value(account)<br ALIGN="LEFT"/>get_acc_values(account)<br ALIGN="LEFT"/>get_notifications()<br ALIGN="LEFT"/>getbroker()<br ALIGN="LEFT"/>getdata()<br ALIGN="LEFT"/>getdurations(timeframe, compression)<br ALIGN="LEFT"/>getmaxduration(timeframe, compression)<br ALIGN="LEFT"/>getposition(contract, clone)<br ALIGN="LEFT"/>histduration(dt1, dt2)<br ALIGN="LEFT"/>historicalData(msg)<br ALIGN="LEFT"/>logmsg()<br ALIGN="LEFT"/>makecontract(symbol, sectype, exch, curr, expiry, strike, right, mult)<br ALIGN="LEFT"/>managedAccounts(msg)<br ALIGN="LEFT"/>nextOrderId()<br ALIGN="LEFT"/>nextTickerId()<br ALIGN="LEFT"/>nextValidId(msg)<br ALIGN="LEFT"/>openOrder(msg)<br ALIGN="LEFT"/>orderStatus(msg)<br ALIGN="LEFT"/>placeOrder(orderid, contract, order)<br ALIGN="LEFT"/><I>position</I>(msg)<br ALIGN="LEFT"/>realtimeBar(msg)<br ALIGN="LEFT"/>reconnect(fromstart, resub)<br ALIGN="LEFT"/>reqAccountUpdates(subscribe, account)<br ALIGN="LEFT"/>reqContractDetails(contract)<br ALIGN="LEFT"/>reqCurrentTime()<br ALIGN="LEFT"/>reqHistoricalData(contract, enddate, duration, barsize, what, useRTH, tz, sessionend)<br ALIGN="LEFT"/>reqHistoricalDataEx(contract, enddate, begindate, timeframe, compression, what, useRTH, tz, sessionend, tickerId)<br ALIGN="LEFT"/>reqMktData(contract, what)<br ALIGN="LEFT"/>reqPositions()<br ALIGN="LEFT"/>reqRealTimeBars(contract, useRTH, duration)<br ALIGN="LEFT"/>reuseQueue(tickerId)<br ALIGN="LEFT"/>start(data, broker)<br ALIGN="LEFT"/>startdatas()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>stopdatas()<br ALIGN="LEFT"/>tfcomp_to_size(timeframe, compression)<br ALIGN="LEFT"/>tickPrice(msg)<br ALIGN="LEFT"/>tickString(msg)<br ALIGN="LEFT"/>timeoffset()<br ALIGN="LEFT"/>updateAccountValue(msg)<br ALIGN="LEFT"/>updatePortfolio(msg)<br ALIGN="LEFT"/>validQueue(q)<br ALIGN="LEFT"/>watcher(msg)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.ichimoku.Ichimoku" [color="black", fontcolor="black", label=<{Ichimoku|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.If" [color="black", fontcolor="black", label=<{If|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>cond : PseudoArray<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicator.Indicator" [color="black", fontcolor="black", label=<{Indicator|csv : bool<br ALIGN="LEFT"/>|advance(size)<br ALIGN="LEFT"/>once_via_next(start, end)<br ALIGN="LEFT"/>oncestart_via_nextstart(start, end)<br ALIGN="LEFT"/>preonce_via_prenext(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineiterator.IndicatorBase" [color="black", fontcolor="black", label=<{IndicatorBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.influxfeed.InfluxDB" [color="black", fontcolor="black", label=<{InfluxDB|biter<br ALIGN="LEFT"/>frompackages : tuple<br ALIGN="LEFT"/>ndb<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.metabase.ItemCollection" [color="black", fontcolor="black", label=<{ItemCollection|<br ALIGN="LEFT"/>|append(item, name)<br ALIGN="LEFT"/>getbyname(name)<br ALIGN="LEFT"/>getitems()<br ALIGN="LEFT"/>getnames()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.kst.KnowSureThing" [color="black", fontcolor="black", label=<{KnowSureThing|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.lrsi.LaguerreFilter" [color="black", fontcolor="black", label=<{LaguerreFilter|alias : tuple<br ALIGN="LEFT"/>l0<br ALIGN="LEFT"/>l0 : float<br ALIGN="LEFT"/>l1<br ALIGN="LEFT"/>l1 : float<br ALIGN="LEFT"/>l2<br ALIGN="LEFT"/>l2 : float<br ALIGN="LEFT"/>l3<br ALIGN="LEFT"/>l3 : float<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.lrsi.LaguerreRSI" [color="black", fontcolor="black", label=<{LaguerreRSI|alias : tuple<br ALIGN="LEFT"/>l0<br ALIGN="LEFT"/>l0 : float<br ALIGN="LEFT"/>l1<br ALIGN="LEFT"/>l1 : float<br ALIGN="LEFT"/>l2<br ALIGN="LEFT"/>l2 : float<br ALIGN="LEFT"/>l3<br ALIGN="LEFT"/>l3 : float<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.linebuffer.LineActions" [color="black", fontcolor="black", label=<{LineActions|<br ALIGN="LEFT"/>|arrayize(obj)<br ALIGN="LEFT"/>getindicators()<br ALIGN="LEFT"/>qbuffer(savemem)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineseries.LineAlias" [color="black", fontcolor="black", label=<{LineAlias|line<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.linebuffer.LineBuffer" [color="black", fontcolor="black", label=<{LineBuffer|QBuffer : int<br ALIGN="LEFT"/>UnBounded : int<br ALIGN="LEFT"/>array : deque, array<br ALIGN="LEFT"/>bind2line<br ALIGN="LEFT"/>bindings : list<br ALIGN="LEFT"/>extension : int<br ALIGN="LEFT"/>extrasize : int<br ALIGN="LEFT"/>idx<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>lencount : int<br ALIGN="LEFT"/>lenmark<br ALIGN="LEFT"/>lines : list<br ALIGN="LEFT"/>maxlen<br ALIGN="LEFT"/>mode : int<br ALIGN="LEFT"/>useislice : bool<br ALIGN="LEFT"/>|addbinding(binding)<br ALIGN="LEFT"/>advance(size)<br ALIGN="LEFT"/>backwards(size, force)<br ALIGN="LEFT"/>bind2lines(binding)<br ALIGN="LEFT"/>buflen()<br ALIGN="LEFT"/>date(ago, tz, naive)<br ALIGN="LEFT"/>datetime(ago, tz, naive)<br ALIGN="LEFT"/>dt(ago)<br ALIGN="LEFT"/>extend(value, size)<br ALIGN="LEFT"/>forward(value, size)<br ALIGN="LEFT"/>get(ago, size)<br ALIGN="LEFT"/>get_idx()<br ALIGN="LEFT"/>getindicators()<br ALIGN="LEFT"/>getzero(idx, size)<br ALIGN="LEFT"/>getzeroval(idx)<br ALIGN="LEFT"/>home()<br ALIGN="LEFT"/>minbuffer(size)<br ALIGN="LEFT"/>oncebinding()<br ALIGN="LEFT"/>plot(idx, size)<br ALIGN="LEFT"/>plotrange(start, end)<br ALIGN="LEFT"/>qbuffer(savemem, extrasize)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>rewind(size)<br ALIGN="LEFT"/>set(value, ago)<br ALIGN="LEFT"/>set_idx(idx, force)<br ALIGN="LEFT"/>time(ago, tz, naive)<br ALIGN="LEFT"/>tm(ago)<br ALIGN="LEFT"/>tm2datetime(tm, ago)<br ALIGN="LEFT"/>tm2dtime(tm, ago)<br ALIGN="LEFT"/>tm_eq(other, ago)<br ALIGN="LEFT"/>tm_ge(other, ago)<br ALIGN="LEFT"/>tm_gt(other, ago)<br ALIGN="LEFT"/>tm_le(other, ago)<br ALIGN="LEFT"/>tm_lt(other, ago)<br ALIGN="LEFT"/>tm_raw(ago)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineiterator.LineIterator" [color="black", fontcolor="black", label=<{LineIterator|bind2line<br ALIGN="LEFT"/>bind2lines<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|addindicator(indicator)<br ALIGN="LEFT"/>bindlines(owner, own)<br ALIGN="LEFT"/>getindicators()<br ALIGN="LEFT"/>getindicators_lines()<br ALIGN="LEFT"/>getobservers()<br ALIGN="LEFT"/><I>next</I>()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/><I>once</I>(start, end)<br ALIGN="LEFT"/>oncestart(start, end)<br ALIGN="LEFT"/><I>prenext</I>()<br ALIGN="LEFT"/><I>preonce</I>(start, end)<br ALIGN="LEFT"/>qbuffer(savemem)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineroot.LineMultiple" [color="black", fontcolor="black", label=<{LineMultiple|<br ALIGN="LEFT"/>|addminperiod(minperiod)<br ALIGN="LEFT"/>incminperiod(minperiod)<br ALIGN="LEFT"/>minbuffer(size)<br ALIGN="LEFT"/>qbuffer(savemem)<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.finance.LineOnClosePlotHandler" [color="black", fontcolor="black", label=<{LineOnClosePlotHandler|alpha : float<br ALIGN="LEFT"/>color : str<br ALIGN="LEFT"/>legend_closes : list<br ALIGN="LEFT"/>loc : Line2D<br ALIGN="LEFT"/>|barcollection(xs, closes, width, label, scaling, bot)<br ALIGN="LEFT"/>legend_artist(legend, orig_handle, fontsize, handlebox)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.linebuffer.LineOwnOperation" [color="black", fontcolor="black", label=<{LineOwnOperation|a<br ALIGN="LEFT"/>operation<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicator.LinePlotterIndicator" [color="black", fontcolor="black", label=<{LinePlotterIndicator|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.lineroot.LineRoot" [color="black", fontcolor="black", label=<{LineRoot|IndType<br ALIGN="LEFT"/>ObsType<br ALIGN="LEFT"/>StratType<br ALIGN="LEFT"/>|<I>addminperiod</I>(minperiod)<br ALIGN="LEFT"/><I>incminperiod</I>(minperiod)<br ALIGN="LEFT"/><I>minbuffer</I>(size)<br ALIGN="LEFT"/><I>next</I>()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/><I>once</I>(start, end)<br ALIGN="LEFT"/>oncestart(start, end)<br ALIGN="LEFT"/><I>prenext</I>()<br ALIGN="LEFT"/><I>preonce</I>(start, end)<br ALIGN="LEFT"/><I>qbuffer</I>(savemem)<br ALIGN="LEFT"/>setminperiod(minperiod)<br ALIGN="LEFT"/>updateminperiod(minperiod)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineseries.LineSeries" [color="black", fontcolor="black", label=<{LineSeries|array<br ALIGN="LEFT"/>csv : bool<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|advance(size)<br ALIGN="LEFT"/>backwards(size, force)<br ALIGN="LEFT"/>extend(value, size)<br ALIGN="LEFT"/>forward(value, size)<br ALIGN="LEFT"/>home()<br ALIGN="LEFT"/>plotlabel()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>rewind(size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineseries.LineSeriesStub" [color="black", fontcolor="black", label=<{LineSeriesStub|extralines : int<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>owner<br ALIGN="LEFT"/>slave : bool<br ALIGN="LEFT"/>|advance(size)<br ALIGN="LEFT"/>backwards(size, force)<br ALIGN="LEFT"/>extend(value, size)<br ALIGN="LEFT"/>forward(value, size)<br ALIGN="LEFT"/>home()<br ALIGN="LEFT"/>minbuffer(size)<br ALIGN="LEFT"/>qbuffer()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>rewind(size)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineroot.LineSingle" [color="black", fontcolor="black", label=<{LineSingle|<br ALIGN="LEFT"/>|addminperiod(minperiod)<br ALIGN="LEFT"/>incminperiod(minperiod)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineseries.Lines" [color="black", fontcolor="black", label=<{Lines|lines : list<br ALIGN="LEFT"/>|advance(size)<br ALIGN="LEFT"/>backwards(size, force)<br ALIGN="LEFT"/>buflen(line)<br ALIGN="LEFT"/>extend(value, size)<br ALIGN="LEFT"/>extrasize()<br ALIGN="LEFT"/>forward(value, size)<br ALIGN="LEFT"/>fullsize()<br ALIGN="LEFT"/>get(ago, size, line)<br ALIGN="LEFT"/>getlinealiases()<br ALIGN="LEFT"/>home()<br ALIGN="LEFT"/>itersize()<br ALIGN="LEFT"/>reset()<br ALIGN="LEFT"/>rewind(size)<br ALIGN="LEFT"/>size()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.linebuffer.LinesOperation" [color="black", fontcolor="black", label=<{LinesOperation|a<br ALIGN="LEFT"/>b<br ALIGN="LEFT"/>bfloat<br ALIGN="LEFT"/>bline<br ALIGN="LEFT"/>btime<br ALIGN="LEFT"/>operation<br ALIGN="LEFT"/>r : bool<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.List" [color="black", fontcolor="black", label=<{List|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observers.logreturns.LogReturns" [color="black", fontcolor="black", label=<{LogReturns|lines : tuple<br ALIGN="LEFT"/>logret1<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.logreturns.LogReturns2" [color="black", fontcolor="black", label=<{LogReturns2|lines : tuple<br ALIGN="LEFT"/>logret2<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.logreturnsrolling.LogReturnsRolling" [color="black", fontcolor="black", label=<{LogReturnsRolling|params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>notify_fund(cash, value, fundvalue, shares)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.Logic" [color="black", fontcolor="black", label=<{Logic|args<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.Lowest" [color="black", fontcolor="black", label=<{Lowest|alias : tuple<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.macd.MACD" [color="black", fontcolor="black", label=<{MACD|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.macd.MACDHisto" [color="black", fontcolor="black", label=<{MACDHisto|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.strategies.sma_crossover.MA_CrossOver" [color="black", fontcolor="black", label=<{MA_CrossOver|alias : tuple<br ALIGN="LEFT"/>buysig<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.mt4csv.MT4CSVData" [color="black", fontcolor="black", label=<{MT4CSVData|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.Max" [color="black", fontcolor="black", label=<{Max|flogic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.deviation.MeanDeviation" [color="black", fontcolor="black", label=<{MeanDeviation|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feed.MetaAbstractDataBase" [color="black", fontcolor="black", label=<{MetaAbstractDataBase|<br ALIGN="LEFT"/>|dopostinit(_obj)<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzer.MetaAnalyzer" [color="black", fontcolor="black", label=<{MetaAnalyzer|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>dopostinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.metabase.MetaBase" [color="black", fontcolor="black", label=<{MetaBase|<br ALIGN="LEFT"/>|doinit(_obj)<br ALIGN="LEFT"/>donew()<br ALIGN="LEFT"/>dopostinit(_obj)<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>doprenew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.broker.MetaBroker" [color="black", fontcolor="black", label=<{MetaBroker|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feed.MetaCSVDataBase" [color="black", fontcolor="black", label=<{MetaCSVDataBase|<br ALIGN="LEFT"/>|dopostinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.chainer.MetaChainer" [color="black", fontcolor="black", label=<{MetaChainer|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.trades.MetaDataTrades" [color="black", fontcolor="black", label=<{MetaDataTrades|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.flt.MetaFilter" [color="black", fontcolor="black", label=<{MetaFilter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.ibbroker.MetaIBBroker" [color="black", fontcolor="black", label=<{MetaIBBroker|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.ibdata.MetaIBData" [color="black", fontcolor="black", label=<{MetaIBData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicator.MetaIndicator" [color="black", fontcolor="black", label=<{MetaIndicator|<br ALIGN="LEFT"/>|cleancache()<br ALIGN="LEFT"/>usecache(onoff)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.linebuffer.MetaLineActions" [color="black", fontcolor="black", label=<{MetaLineActions|<br ALIGN="LEFT"/>|cleancache()<br ALIGN="LEFT"/>dopostinit(_obj)<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>usecache(onoff)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineiterator.MetaLineIterator" [color="black", fontcolor="black", label=<{MetaLineIterator|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>dopostinit(_obj)<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineroot.MetaLineRoot" [color="black", fontcolor="black", label=<{MetaLineRoot|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineseries.MetaLineSeries" [color="black", fontcolor="black", label=<{MetaLineSeries|linealias<br ALIGN="LEFT"/>lines<br ALIGN="LEFT"/>plotinfo<br ALIGN="LEFT"/>plotlines<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.mabase.MetaMovAvBase" [color="black", fontcolor="black", label=<{MetaMovAvBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.oandabroker.MetaOandaBroker" [color="black", fontcolor="black", label=<{MetaOandaBroker|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.oanda.MetaOandaData" [color="black", fontcolor="black", label=<{MetaOandaData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observer.MetaObserver" [color="black", fontcolor="black", label=<{MetaObserver|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.metabase.MetaParams" [color="black", fontcolor="black", label=<{MetaParams|frompackages<br ALIGN="LEFT"/>packages<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.rollover.MetaRollOver" [color="black", fontcolor="black", label=<{MetaRollOver|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.strategy.MetaSigStrategy" [color="black", fontcolor="black", label=<{MetaSigStrategy|next<br ALIGN="LEFT"/>|dopostinit(_obj)<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.store.MetaSingleton" [color="black", fontcolor="black", label=<{MetaSingleton|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.ibstore.MetaSingleton" [color="black", fontcolor="black", label=<{MetaSingleton|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.oandastore.MetaSingleton" [color="black", fontcolor="black", label=<{MetaSingleton|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.vcstore.MetaSingleton" [color="black", fontcolor="black", label=<{MetaSingleton|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.strategy.MetaStrategy" [color="black", fontcolor="black", label=<{MetaStrategy|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>dopostinit(_obj)<br ALIGN="LEFT"/>dopreinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzer.MetaTimeFrameAnalyzerBase" [color="black", fontcolor="black", label=<{MetaTimeFrameAnalyzerBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.vcbroker.MetaVCBroker" [color="black", fontcolor="black", label=<{MetaVCBroker|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.vcdata.MetaVCData" [color="black", fontcolor="black", label=<{MetaVCData|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.vchartfile.MetaVChartFile" [color="black", fontcolor="black", label=<{MetaVChartFile|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.Min" [color="black", fontcolor="black", label=<{Min|flogic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.MinusDirectionalIndicator" [color="black", fontcolor="black", label=<{MinusDirectionalIndicator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.errors.ModuleImportError" [color="black", fontcolor="red", label=<{ModuleImportError|args : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.momentum.Momentum" [color="black", fontcolor="black", label=<{Momentum|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.momentum.MomentumOscillator" [color="black", fontcolor="black", label=<{MomentumOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.mabase.MovAv" [color="black", fontcolor="black", label=<{MovAv|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.mabase.MovingAverage" [color="black", fontcolor="black", label=<{MovingAverage|<br ALIGN="LEFT"/>|register(regcls)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.mabase.MovingAverageBase" [color="black", fontcolor="black", label=<{MovingAverageBase|params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.sma.MovingAverageSimple" [color="black", fontcolor="black", label=<{MovingAverageSimple|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicator.MtLinePlotterIndicator" [color="black", fontcolor="black", label=<{MtLinePlotterIndicator|<br ALIGN="LEFT"/>|donew()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineiterator.MultiCoupler" [color="black", fontcolor="black", label=<{MultiCoupler|dlen : int<br ALIGN="LEFT"/>dsize<br ALIGN="LEFT"/>dvals<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.multicursor.MultiCursor" [color="black", fontcolor="black", label=<{MultiCursor|axes<br ALIGN="LEFT"/>background : NoneType<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>hlines : list<br ALIGN="LEFT"/>horizMulti : bool<br ALIGN="LEFT"/>horizOn : bool<br ALIGN="LEFT"/>needclear : bool<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>vertMulti : bool<br ALIGN="LEFT"/>vertOn : bool<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>vlines : list<br ALIGN="LEFT"/>|clear(event)<br ALIGN="LEFT"/>connect()<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.multicursor.MultiCursor2" [color="black", fontcolor="black", label=<{MultiCursor2|axes<br ALIGN="LEFT"/>background : NoneType<br ALIGN="LEFT"/>canvas<br ALIGN="LEFT"/>hlines : list<br ALIGN="LEFT"/>horizOn : bool<br ALIGN="LEFT"/>needclear : bool<br ALIGN="LEFT"/>useblit<br ALIGN="LEFT"/>vertOn : bool<br ALIGN="LEFT"/>visible : bool<br ALIGN="LEFT"/>vlines : list<br ALIGN="LEFT"/>|clear(event)<br ALIGN="LEFT"/>connect()<br ALIGN="LEFT"/>disconnect()<br ALIGN="LEFT"/>onmove(event)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.MultiLogic" [color="black", fontcolor="black", label=<{MultiLogic|<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.MultiLogicReduce" [color="black", fontcolor="black", label=<{MultiLogicReduce|flogic : partial<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.formatters.MyDateFormatter" [color="black", fontcolor="black", label=<{MyDateFormatter|dates<br ALIGN="LEFT"/>fmt : str<br ALIGN="LEFT"/>lendates<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.formatters.MyVolFormatter" [color="black", fontcolor="black", label=<{MyVolFormatter|Suffixes : list<br ALIGN="LEFT"/>divisor : float<br ALIGN="LEFT"/>suffix : str<br ALIGN="LEFT"/>volmax<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.crossover.NonZeroDifference" [color="black", fontcolor="black", label=<{NonZeroDifference|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>oncestart(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.dataseries.OHLC" [color="black", fontcolor="black", label=<{OHLC|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.dataseries.OHLCDateTime" [color="black", fontcolor="black", label=<{OHLCDateTime|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.finance.OHLCPlotHandler" [color="black", fontcolor="black", label=<{OHLCPlotHandler|barcol : LineCollection<br ALIGN="LEFT"/>closecol : LineCollection<br ALIGN="LEFT"/>colordown : tuple<br ALIGN="LEFT"/>colorup : tuple<br ALIGN="LEFT"/>legend_closes : list<br ALIGN="LEFT"/>legend_highs : list<br ALIGN="LEFT"/>legend_lows : list<br ALIGN="LEFT"/>legend_opens : list<br ALIGN="LEFT"/>opencol : LineCollection<br ALIGN="LEFT"/>|barcollection(xs, opens, highs, lows, closes, width, tickwidth, label, scaling, bot)<br ALIGN="LEFT"/>legend_artist(legend, orig_handle, fontsize, handlebox)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.ols.OLS_BetaN" [color="black", fontcolor="black", label=<{OLS_BetaN|lines : tuple<br ALIGN="LEFT"/>packages : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.ols.OLS_Slope_InterceptN" [color="black", fontcolor="black", label=<{OLS_Slope_InterceptN|lines : tuple<br ALIGN="LEFT"/>packages : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.ols.OLS_TransformationN" [color="black", fontcolor="black", label=<{OLS_TransformationN|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.oandabroker.OandaBroker" [color="black", fontcolor="black", label=<{OandaBroker|brackets : dict<br ALIGN="LEFT"/>cash : float<br ALIGN="LEFT"/>notifs : deque<br ALIGN="LEFT"/>o<br ALIGN="LEFT"/>opending : defaultdict<br ALIGN="LEFT"/>orders : OrderedDict<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>positions : defaultdict<br ALIGN="LEFT"/>startingcash : float<br ALIGN="LEFT"/>startingvalue : float<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|buy(owner, data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent, parent, transmit)<br ALIGN="LEFT"/>cancel(order)<br ALIGN="LEFT"/>data_started(data)<br ALIGN="LEFT"/>get_notification()<br ALIGN="LEFT"/>getcash()<br ALIGN="LEFT"/>getposition(data, clone)<br ALIGN="LEFT"/>getvalue(datas)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>notify(order)<br ALIGN="LEFT"/>orderstatus(order)<br ALIGN="LEFT"/>sell(owner, data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent, parent, transmit)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.brokers.oandabroker.OandaCommInfo" [color="black", fontcolor="black", label=<{OandaCommInfo|<br ALIGN="LEFT"/>|getoperationcost(size, price)<br ALIGN="LEFT"/>getvaluesize(size, price)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.oanda.OandaData" [color="black", fontcolor="black", label=<{OandaData|contractdetails<br ALIGN="LEFT"/>o<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>qhist<br ALIGN="LEFT"/>qlive : Queue<br ALIGN="LEFT"/>|haslivedata()<br ALIGN="LEFT"/>islive()<br ALIGN="LEFT"/>setenvironment(env)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.stores.oandastore.OandaNetworkError" [color="black", fontcolor="black", label=<{OandaNetworkError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.oandastore.OandaRequestError" [color="black", fontcolor="black", label=<{OandaRequestError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.oandastore.OandaStore" [color="black", fontcolor="black", label=<{OandaStore|BrokerCls : NoneType<br ALIGN="LEFT"/>DataCls : NoneType<br ALIGN="LEFT"/>broker : NoneType<br ALIGN="LEFT"/>cash : NoneType<br ALIGN="LEFT"/>datas : list<br ALIGN="LEFT"/>notifs : deque<br ALIGN="LEFT"/>oapi<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>q_account : Queue<br ALIGN="LEFT"/>q_orderclose : Queue<br ALIGN="LEFT"/>q_ordercreate : Queue<br ALIGN="LEFT"/>|broker_threads()<br ALIGN="LEFT"/>candles(dataname, dtbegin, dtend, timeframe, compression, candleFormat, includeFirst)<br ALIGN="LEFT"/>get_cash()<br ALIGN="LEFT"/>get_granularity(timeframe, compression)<br ALIGN="LEFT"/>get_instrument(dataname)<br ALIGN="LEFT"/>get_notifications()<br ALIGN="LEFT"/>get_positions()<br ALIGN="LEFT"/>get_value()<br ALIGN="LEFT"/>getbroker()<br ALIGN="LEFT"/>getdata()<br ALIGN="LEFT"/>order_cancel(order)<br ALIGN="LEFT"/>order_create(order, stopside, takeside)<br ALIGN="LEFT"/>put_notification(msg)<br ALIGN="LEFT"/>start(data, broker)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>streaming_events(tmout)<br ALIGN="LEFT"/>streaming_prices(dataname, tmout)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.stores.oandastore.OandaStreamError" [color="black", fontcolor="black", label=<{OandaStreamError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.oandastore.OandaTimeFrameError" [color="black", fontcolor="black", label=<{OandaTimeFrameError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.observer.Observer" [color="black", fontcolor="black", label=<{Observer|csv : bool<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|prenext()<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineiterator.ObserverBase" [color="black", fontcolor="black", label=<{ObserverBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.OperationN" [color="black", fontcolor="black", label=<{OperationN|<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.cerebro.OptReturn" [color="black", fontcolor="black", label=<{OptReturn|p<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.Or" [color="black", fontcolor="black", label=<{Or|flogic : staticmethod<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.order.Order" [color="black", fontcolor="black", label=<{Order|status<br ALIGN="LEFT"/>|execute(dt, size, price, closed, closedvalue, closedcomm, opened, openedvalue, openedcomm, margin, pnl, psize, pprice)<br ALIGN="LEFT"/>expire()<br ALIGN="LEFT"/>trailadjust(price)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.order.OrderBase" [color="black", fontcolor="black", label=<{OrderBase|Accepted<br ALIGN="LEFT"/>Buy<br ALIGN="LEFT"/>Canceled<br ALIGN="LEFT"/>Cancelled<br ALIGN="LEFT"/>Close<br ALIGN="LEFT"/>Completed<br ALIGN="LEFT"/>Created<br ALIGN="LEFT"/>DAY : timedelta<br ALIGN="LEFT"/>ExecTypes : list<br ALIGN="LEFT"/>Expired<br ALIGN="LEFT"/>Historical<br ALIGN="LEFT"/>Limit<br ALIGN="LEFT"/>Margin<br ALIGN="LEFT"/>Market<br ALIGN="LEFT"/>OrdTypes : list<br ALIGN="LEFT"/>Partial<br ALIGN="LEFT"/>Rejected<br ALIGN="LEFT"/>Sell<br ALIGN="LEFT"/>Status : list<br ALIGN="LEFT"/>Stop<br ALIGN="LEFT"/>StopLimit<br ALIGN="LEFT"/>StopTrail<br ALIGN="LEFT"/>StopTrailLimit<br ALIGN="LEFT"/>Submitted<br ALIGN="LEFT"/>T_Close<br ALIGN="LEFT"/>T_Date<br ALIGN="LEFT"/>T_Day<br ALIGN="LEFT"/>T_None<br ALIGN="LEFT"/>V_None : range<br ALIGN="LEFT"/>broker : NoneType<br ALIGN="LEFT"/>comminfo : NoneType<br ALIGN="LEFT"/>created<br ALIGN="LEFT"/>dteos : float<br ALIGN="LEFT"/>exectype<br ALIGN="LEFT"/>executed<br ALIGN="LEFT"/>info : AutoOrderedDict<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plen<br ALIGN="LEFT"/>plimit<br ALIGN="LEFT"/>plimit<br ALIGN="LEFT"/>position : int<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>refbasis : count<br ALIGN="LEFT"/>size<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>triggered : bool<br ALIGN="LEFT"/>valid<br ALIGN="LEFT"/>|ExecType(exectype)<br ALIGN="LEFT"/>accept(broker)<br ALIGN="LEFT"/>activate()<br ALIGN="LEFT"/>active()<br ALIGN="LEFT"/>addcomminfo(comminfo)<br ALIGN="LEFT"/>addinfo()<br ALIGN="LEFT"/>alive()<br ALIGN="LEFT"/>brokerstatus()<br ALIGN="LEFT"/>cancel()<br ALIGN="LEFT"/>clone()<br ALIGN="LEFT"/>completed()<br ALIGN="LEFT"/>execute(dt, size, price, closed, closedvalue, closedcomm, opened, openedvalue, openedcomm, margin, pnl, psize, pprice)<br ALIGN="LEFT"/>expire()<br ALIGN="LEFT"/>getordername(exectype)<br ALIGN="LEFT"/>getstatusname(status)<br ALIGN="LEFT"/>isbuy()<br ALIGN="LEFT"/>issell()<br ALIGN="LEFT"/>margin()<br ALIGN="LEFT"/>ordtypename(ordtype)<br ALIGN="LEFT"/>partial()<br ALIGN="LEFT"/>reject(broker)<br ALIGN="LEFT"/>setposition(position)<br ALIGN="LEFT"/>submit(broker)<br ALIGN="LEFT"/><I>trailadjust</I>(price)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.order.OrderData" [color="black", fontcolor="black", label=<{OrderData|comm : float<br ALIGN="LEFT"/>dt : NoneType<br ALIGN="LEFT"/>exbits : deque<br ALIGN="LEFT"/>margin : NoneType<br ALIGN="LEFT"/>p1 : int<br ALIGN="LEFT"/>p2 : int<br ALIGN="LEFT"/>pclose : float<br ALIGN="LEFT"/>plimit<br ALIGN="LEFT"/>plimit : float<br ALIGN="LEFT"/>pnl : float<br ALIGN="LEFT"/>pprice : int<br ALIGN="LEFT"/>price : float<br ALIGN="LEFT"/>pricelimit : float<br ALIGN="LEFT"/>psize : int<br ALIGN="LEFT"/>remsize : int<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>trailamount : float<br ALIGN="LEFT"/>trailpercent : float<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|add(dt, size, price, closed, closedvalue, closedcomm, opened, openedvalue, openedcomm, pnl, psize, pprice)<br ALIGN="LEFT"/>addbit(exbit)<br ALIGN="LEFT"/>clone()<br ALIGN="LEFT"/>getpending()<br ALIGN="LEFT"/>iterpending()<br ALIGN="LEFT"/>markpending()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.order.OrderExecutionBit" [color="black", fontcolor="black", label=<{OrderExecutionBit|closed : int<br ALIGN="LEFT"/>closedcomm : float<br ALIGN="LEFT"/>closedvalue : float<br ALIGN="LEFT"/>comm : float<br ALIGN="LEFT"/>dt : NoneType<br ALIGN="LEFT"/>opened : int<br ALIGN="LEFT"/>openedcomm : float<br ALIGN="LEFT"/>openedvalue : float<br ALIGN="LEFT"/>pnl : float<br ALIGN="LEFT"/>pprice : float<br ALIGN="LEFT"/>price : float<br ALIGN="LEFT"/>psize : int<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.utils.ordereddefaultdict.OrderedDefaultdict" [color="black", fontcolor="black", label=<{OrderedDefaultdict|default_factory : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.oscillator.Oscillator" [color="black", fontcolor="black", label=<{Oscillator|dataosc<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.oscillator.OscillatorMixIn" [color="black", fontcolor="black", label=<{OscillatorMixIn|plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.plot.PInfo" [color="black", fontcolor="black", label=<{PInfo|clock : NoneType<br ALIGN="LEFT"/>coloridx : defaultdict<br ALIGN="LEFT"/>cursors : list<br ALIGN="LEFT"/>daxis : OrderedDict<br ALIGN="LEFT"/>figs : list<br ALIGN="LEFT"/>handles : defaultdict<br ALIGN="LEFT"/>labels : defaultdict<br ALIGN="LEFT"/>legpos : defaultdict<br ALIGN="LEFT"/>nrows : int<br ALIGN="LEFT"/>pend<br ALIGN="LEFT"/>prop : FontProperties<br ALIGN="LEFT"/>psize<br ALIGN="LEFT"/>pstart<br ALIGN="LEFT"/>row : int<br ALIGN="LEFT"/>sch<br ALIGN="LEFT"/>sharex : NoneType<br ALIGN="LEFT"/>vaxis : list<br ALIGN="LEFT"/>x : list, NoneType<br ALIGN="LEFT"/>xdata : list, NoneType<br ALIGN="LEFT"/>xend : int<br ALIGN="LEFT"/>xlen : int<br ALIGN="LEFT"/>xreal<br ALIGN="LEFT"/>xstart : int<br ALIGN="LEFT"/>zorder : dict<br ALIGN="LEFT"/>|color(ax)<br ALIGN="LEFT"/>newfig(figid, numfig, mpyplot)<br ALIGN="LEFT"/>nextcolor(ax)<br ALIGN="LEFT"/>zordercur(ax)<br ALIGN="LEFT"/>zordernext(ax)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.pandafeed.PandasData" [color="black", fontcolor="black", label=<{PandasData|datafields : list<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.pandafeed.PandasDirectData" [color="black", fontcolor="black", label=<{PandasDirectData|datafields : list<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.tradingcal.PandasMarketCalendar" [color="black", fontcolor="black", label=<{PandasMarketCalendar|csize : timedelta<br ALIGN="LEFT"/>dcache<br ALIGN="LEFT"/>idcache<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|schedule(day, tz)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.psar.ParabolicSAR" [color="black", fontcolor="black", label=<{ParabolicSAR|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>nextstart()<br ALIGN="LEFT"/>prenext()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.metabase.ParamsBase" [color="black", fontcolor="black", label=<{ParamsBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.percentchange.PercentChange" [color="black", fontcolor="black", label=<{PercentChange|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.percentrank.PercentRank" [color="black", fontcolor="black", label=<{PercentRank|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.sizers.percents_sizer.PercentSizer" [color="black", fontcolor="black", label=<{PercentSizer|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.sizers.percents_sizer.PercentSizerInt" [color="black", fontcolor="black", label=<{PercentSizerInt|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.priceoscillator.PercentagePriceOscillator" [color="black", fontcolor="black", label=<{PercentagePriceOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.priceoscillator.PercentagePriceOscillatorShort" [color="black", fontcolor="black", label=<{PercentagePriceOscillatorShort|alias : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.PeriodN" [color="black", fontcolor="black", label=<{PeriodN|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.periodstats.PeriodStats" [color="black", fontcolor="black", label=<{PeriodStats|params : tuple<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.pivotpoint.PivotPoint" [color="black", fontcolor="black", label=<{PivotPoint|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.scheme.PlotScheme" [color="black", fontcolor="black", label=<{PlotScheme|baralpha : float<br ALIGN="LEFT"/>bardown : str<br ALIGN="LEFT"/>bardownfill : bool<br ALIGN="LEFT"/>bartrans : float<br ALIGN="LEFT"/>barup : str<br ALIGN="LEFT"/>barupfill : bool<br ALIGN="LEFT"/>fillalpha : float<br ALIGN="LEFT"/>fmt_x_data : NoneType<br ALIGN="LEFT"/>fmt_x_ticks : str<br ALIGN="LEFT"/>grid : bool<br ALIGN="LEFT"/>hlinescolor : str<br ALIGN="LEFT"/>hlinesstyle : str<br ALIGN="LEFT"/>hlineswidth : float<br ALIGN="LEFT"/>lcolors : list<br ALIGN="LEFT"/>legenddataloc : str<br ALIGN="LEFT"/>legendind : bool<br ALIGN="LEFT"/>legendindloc : str<br ALIGN="LEFT"/>legendtrans : float<br ALIGN="LEFT"/>linevalues : bool<br ALIGN="LEFT"/>loc : str<br ALIGN="LEFT"/>plotdist : float<br ALIGN="LEFT"/>rowsmajor : int<br ALIGN="LEFT"/>rowsminor : int<br ALIGN="LEFT"/>style : str<br ALIGN="LEFT"/>subtxtsize : int<br ALIGN="LEFT"/>subtxttrans : float<br ALIGN="LEFT"/>tickrotation : int<br ALIGN="LEFT"/>valuetags : bool<br ALIGN="LEFT"/>voldown : str<br ALIGN="LEFT"/>voloverlay : bool<br ALIGN="LEFT"/>volpushup : float<br ALIGN="LEFT"/>volscaling : float<br ALIGN="LEFT"/>voltrans : float<br ALIGN="LEFT"/>volume : bool<br ALIGN="LEFT"/>volup : str<br ALIGN="LEFT"/>yadjust : float<br ALIGN="LEFT"/>ytight : bool<br ALIGN="LEFT"/>zdown : bool<br ALIGN="LEFT"/>|color(idx)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.plot.Plot_OldSync" [color="black", fontcolor="black", label=<{Plot_OldSync|dplotsdown : defaultdict<br ALIGN="LEFT"/>dplotsover : defaultdict<br ALIGN="LEFT"/>dplotstop : list<br ALIGN="LEFT"/>dplotsup : defaultdict<br ALIGN="LEFT"/>mpyplot<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>pinf<br ALIGN="LEFT"/>|calcrows(strategy)<br ALIGN="LEFT"/>drawtag(ax, x, y, facecolor, edgecolor, alpha)<br ALIGN="LEFT"/>newaxis(obj, rowspan)<br ALIGN="LEFT"/>plot(strategy, figid, numfigs, iplot, start, end)<br ALIGN="LEFT"/>plotdata(data, indicators)<br ALIGN="LEFT"/>plotind(iref, ind, subinds, upinds, downinds, masterax)<br ALIGN="LEFT"/>plotvolume(data, opens, highs, lows, closes, volumes, label)<br ALIGN="LEFT"/>savefig(fig, filename, width, height, dpi, tight)<br ALIGN="LEFT"/>setlocators(ax)<br ALIGN="LEFT"/>show()<br ALIGN="LEFT"/>sortdataindicators(strategy)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.PlusDirectionalIndicator" [color="black", fontcolor="black", label=<{PlusDirectionalIndicator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.position.Position" [color="black", fontcolor="black", label=<{Position|adjbase : NoneType<br ALIGN="LEFT"/>datetime : NoneType<br ALIGN="LEFT"/>price : float<br ALIGN="LEFT"/>price_orig : float<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>upclosed : int<br ALIGN="LEFT"/>updt : NoneType<br ALIGN="LEFT"/>upopened : int<br ALIGN="LEFT"/>|clone()<br ALIGN="LEFT"/>fix(size, price)<br ALIGN="LEFT"/>pseudoupdate(size, price)<br ALIGN="LEFT"/>set(size, price)<br ALIGN="LEFT"/>update(size, price, dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.positions.PositionsValue" [color="black", fontcolor="black", label=<{PositionsValue|params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.prettygoodoscillator.PrettyGoodOscillator" [color="black", fontcolor="black", label=<{PrettyGoodOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.priceoscillator.PriceOscillator" [color="black", fontcolor="black", label=<{PriceOscillator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.linebuffer.PseudoArray" [color="black", fontcolor="black", label=<{PseudoArray|array<br ALIGN="LEFT"/>wrapped<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.pyfolio.PyFolio" [color="black", fontcolor="black", label=<{PyFolio|params : tuple<br ALIGN="LEFT"/>|get_pf_items()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.quandl.Quandl" [color="black", fontcolor="black", label=<{Quandl|error : str, NoneType<br ALIGN="LEFT"/>f : StringIO<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.quandl.QuandlCSV" [color="black", fontcolor="black", label=<{QuandlCSV|f : StringIO<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.locator.RRuleLocator" [color="black", fontcolor="black", label=<{RRuleLocator|<br ALIGN="LEFT"/>|datalim_to_dt()<br ALIGN="LEFT"/>tick_values(vmin, vmax)<br ALIGN="LEFT"/>viewlim_to_dt()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.rsi.RSI_EMA" [color="black", fontcolor="black", label=<{RSI_EMA|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.RSI_SMA" [color="black", fontcolor="black", label=<{RSI_SMA|alias : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.RSI_Safe" [color="black", fontcolor="black", label=<{RSI_Safe|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.vcstore.RTEventSink" [color="black", fontcolor="black", label=<{RTEventSink|lastconn : NoneType<br ALIGN="LEFT"/>store<br ALIGN="LEFT"/>vcrtmod<br ALIGN="LEFT"/>|OnInternalEvent(p1, p2, p3)<br ALIGN="LEFT"/><I>OnNewTicks</I>(ArrayTicks)<br ALIGN="LEFT"/>OnServerShutDown()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.stores.ibstore.RTVolume" [color="black", fontcolor="black", label=<{RTVolume|datetime<br ALIGN="LEFT"/>price<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.momentum.RateOfChange" [color="black", fontcolor="black", label=<{RateOfChange|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.momentum.RateOfChange100" [color="black", fontcolor="black", label=<{RateOfChange100|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.functions.Reduce" [color="black", fontcolor="black", label=<{Reduce|flogic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.ReduceN" [color="black", fontcolor="black", label=<{ReduceN|func<br ALIGN="LEFT"/>func<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rmi.RelativeMomentumIndex" [color="black", fontcolor="black", label=<{RelativeMomentumIndex|alias : tuple<br ALIGN="LEFT"/>linealias : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.RelativeStrengthIndex" [color="black", fontcolor="black", label=<{RelativeStrengthIndex|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.filters.renko.Renko" [color="black", fontcolor="black", label=<{Renko|params : tuple<br ALIGN="LEFT"/>|next(data)<br ALIGN="LEFT"/>nextstart(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.resamplerfilter.Replayer" [color="black", fontcolor="black", label=<{Replayer|params : tuple<br ALIGN="LEFT"/>replaying : bool<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ReplayerDaily" [color="black", fontcolor="black", label=<{ReplayerDaily|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ReplayerMinutes" [color="black", fontcolor="black", label=<{ReplayerMinutes|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ReplayerMonthly" [color="black", fontcolor="black", label=<{ReplayerMonthly|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ReplayerSeconds" [color="black", fontcolor="black", label=<{ReplayerSeconds|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ReplayerTicks" [color="black", fontcolor="black", label=<{ReplayerTicks|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ReplayerWeekly" [color="black", fontcolor="black", label=<{ReplayerWeekly|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.Resampler" [color="black", fontcolor="black", label=<{Resampler|params : tuple<br ALIGN="LEFT"/>replaying : bool<br ALIGN="LEFT"/>|last(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerDaily" [color="black", fontcolor="black", label=<{ResamplerDaily|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerMinutes" [color="black", fontcolor="black", label=<{ResamplerMinutes|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerMonthly" [color="black", fontcolor="black", label=<{ResamplerMonthly|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerSeconds" [color="black", fontcolor="black", label=<{ResamplerSeconds|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerTicks" [color="black", fontcolor="black", label=<{ResamplerTicks|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerWeekly" [color="black", fontcolor="black", label=<{ResamplerWeekly|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.resamplerfilter.ResamplerYearly" [color="black", fontcolor="black", label=<{ResamplerYearly|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.returns.Returns" [color="black", fontcolor="black", label=<{Returns|params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.rollover.RollOver" [color="black", fontcolor="black", label=<{RollOver|params : tuple<br ALIGN="LEFT"/>|islive()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.sqn.SQN" [color="black", fontcolor="black", label=<{SQN|alias : tuple<br ALIGN="LEFT"/>count : int<br ALIGN="LEFT"/>pnl : list<br ALIGN="LEFT"/>rets : AutoOrderedDict<br ALIGN="LEFT"/>|create_analysis()<br ALIGN="LEFT"/>notify_trade(trade)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.order.SellOrder" [color="black", fontcolor="black", label=<{SellOrder|ordtype<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.filters.session.SessionFiller" [color="black", fontcolor="black", label=<{SessionFiller|MAXDATE : datetime, date<br ALIGN="LEFT"/>dtime_prev<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>seenbar : bool<br ALIGN="LEFT"/>sessend : datetime, date<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.filters.session.SessionFilter" [color="black", fontcolor="black", label=<{SessionFilter|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.filters.session.SessionFilterSimple" [color="black", fontcolor="black", label=<{SessionFilterSimple|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.sharpe.SharpeRatio" [color="black", fontcolor="black", label=<{SharpeRatio|RATEFACTORS : dict<br ALIGN="LEFT"/>anret<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>ratio : NoneType<br ALIGN="LEFT"/>timereturn<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.sharpe.SharpeRatio_A" [color="black", fontcolor="black", label=<{SharpeRatio_A|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.sierrachart.SierraChartCSVData" [color="black", fontcolor="black", label=<{SierraChartCSVData|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.signal.Signal" [color="black", fontcolor="black", label=<{Signal|SignalTypes : list<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.strategy.SignalStrategy" [color="black", fontcolor="black", label=<{SignalStrategy|params : tuple<br ALIGN="LEFT"/>|signal_add(sigtype, signal)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.dataseries.SimpleFilterWrapper" [color="black", fontcolor="black", label=<{SimpleFilterWrapper|args : list, tuple<br ALIGN="LEFT"/>ffilter<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.lineiterator.SingleCoupler" [color="black", fontcolor="black", label=<{SingleCoupler|cdata<br ALIGN="LEFT"/>dlen : int<br ALIGN="LEFT"/>val : float<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.sizer.Sizer" [color="black", fontcolor="black", label=<{Sizer|broker<br ALIGN="LEFT"/>broker : NoneType<br ALIGN="LEFT"/>strategy<br ALIGN="LEFT"/>strategy : NoneType<br ALIGN="LEFT"/>|getsizing(data, isbuy)<br ALIGN="LEFT"/>set(strategy, broker)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.smma.SmoothedMovingAverage" [color="black", fontcolor="black", label=<{SmoothedMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.deviation.StandardDeviation" [color="black", fontcolor="black", label=<{StandardDeviation|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.utils.flushfile.StdOutDevNull" [color="black", fontcolor="black", label=<{StdOutDevNull|stdout : StringIO, TextIOWrapper<br ALIGN="LEFT"/>|<I>flush</I>()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/><I>write</I>(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.stochastic.Stochastic" [color="black", fontcolor="black", label=<{Stochastic|alias : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.stochastic.StochasticFast" [color="black", fontcolor="black", label=<{StochasticFast|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.stochastic.StochasticFull" [color="black", fontcolor="black", label=<{StochasticFull|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.order.StopBuyOrder" [color="black", fontcolor="black", label=<{StopBuyOrder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.order.StopLimitBuyOrder" [color="black", fontcolor="black", label=<{StopLimitBuyOrder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.order.StopLimitSellOrder" [color="black", fontcolor="black", label=<{StopLimitSellOrder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.order.StopSellOrder" [color="black", fontcolor="black", label=<{StopSellOrder|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.store.Store" [color="black", fontcolor="black", label=<{Store|BrokerCls : NoneType<br ALIGN="LEFT"/>DataCls : NoneType<br ALIGN="LEFT"/>broker : NoneType<br ALIGN="LEFT"/>datas : list<br ALIGN="LEFT"/>notifs : deque<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|get_notifications()<br ALIGN="LEFT"/>getbroker()<br ALIGN="LEFT"/>getdata()<br ALIGN="LEFT"/>put_notification(msg)<br ALIGN="LEFT"/>start(data, broker)<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.strategy.Strategy" [color="black", fontcolor="black", label=<{Strategy|csv : bool<br ALIGN="LEFT"/>indobscsv : list<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>position<br ALIGN="LEFT"/>positionbyname<br ALIGN="LEFT"/>positions<br ALIGN="LEFT"/>positionsbyname<br ALIGN="LEFT"/>sizer<br ALIGN="LEFT"/>|add_timer(when, offset, repeat, weekdays, weekcarry, monthdays, monthcarry, allow, tzdata, cheat)<br ALIGN="LEFT"/>buy(data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent, parent, transmit)<br ALIGN="LEFT"/>buy_bracket(data, size, price, plimit, exectype, valid, tradeid, trailamount, trailpercent, oargs, stopprice, stopexec, stopargs, limitprice, limitexec, limitargs)<br ALIGN="LEFT"/>cancel(order)<br ALIGN="LEFT"/>clear()<br ALIGN="LEFT"/>close(data, size)<br ALIGN="LEFT"/>getdatabyname(name)<br ALIGN="LEFT"/>getdatanames()<br ALIGN="LEFT"/>getposition(data, broker)<br ALIGN="LEFT"/>getpositionbyname(name, broker)<br ALIGN="LEFT"/>getpositions(broker)<br ALIGN="LEFT"/>getpositionsbyname(broker)<br ALIGN="LEFT"/>getsizer()<br ALIGN="LEFT"/>getsizing(data, isbuy)<br ALIGN="LEFT"/>getwriterheaders()<br ALIGN="LEFT"/>getwriterinfo()<br ALIGN="LEFT"/>getwritervalues()<br ALIGN="LEFT"/><I>next_open</I>()<br ALIGN="LEFT"/>nextstart_open()<br ALIGN="LEFT"/><I>notify_cashvalue</I>(cash, value)<br ALIGN="LEFT"/><I>notify_data</I>(data, status)<br ALIGN="LEFT"/><I>notify_fund</I>(cash, value, fundvalue, shares)<br ALIGN="LEFT"/><I>notify_order</I>(order)<br ALIGN="LEFT"/><I>notify_store</I>(msg)<br ALIGN="LEFT"/><I>notify_timer</I>(timer, when)<br ALIGN="LEFT"/><I>notify_trade</I>(trade)<br ALIGN="LEFT"/>order_target_percent(data, target)<br ALIGN="LEFT"/>order_target_size(data, target)<br ALIGN="LEFT"/>order_target_value(data, target, price)<br ALIGN="LEFT"/><I>prenext_open</I>()<br ALIGN="LEFT"/>qbuffer(savemem, replaying)<br ALIGN="LEFT"/>sell(data, size, price, plimit, exectype, valid, tradeid, oco, trailamount, trailpercent, parent, transmit)<br ALIGN="LEFT"/>sell_bracket(data, size, price, plimit, exectype, valid, tradeid, trailamount, trailpercent, oargs, stopprice, stopexec, stopargs, limitprice, limitexec, limitargs)<br ALIGN="LEFT"/>set_tradehistory(onoff)<br ALIGN="LEFT"/>setsizer(sizer)<br ALIGN="LEFT"/><I>start</I>()<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.lineiterator.StrategyBase" [color="black", fontcolor="black", label=<{StrategyBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.errors.StrategySkipError" [color="black", fontcolor="red", label=<{StrategySkipError|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.oandastore.Streamer" [color="black", fontcolor="black", label=<{Streamer|connected : bool<br ALIGN="LEFT"/>q<br ALIGN="LEFT"/>|on_error(data)<br ALIGN="LEFT"/>on_success(data)<br ALIGN="LEFT"/>run(endpoint, params)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.functions.Sum" [color="black", fontcolor="black", label=<{Sum|flogic<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.SumN" [color="black", fontcolor="black", label=<{SumN|func<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzers.drawdown.TimeDrawDown" [color="black", fontcolor="black", label=<{TimeDrawDown|dd : float<br ALIGN="LEFT"/>ddlen : int<br ALIGN="LEFT"/>maxdd : float<br ALIGN="LEFT"/>maxddlen : int<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>peak : float<br ALIGN="LEFT"/>|on_dt_over()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.dataseries.TimeFrame" [color="black", fontcolor="black", label=<{TimeFrame|Days<br ALIGN="LEFT"/>MicroSeconds<br ALIGN="LEFT"/>Minutes<br ALIGN="LEFT"/>Months<br ALIGN="LEFT"/>Names : list<br ALIGN="LEFT"/>NoTimeFrame<br ALIGN="LEFT"/>Seconds<br ALIGN="LEFT"/>Ticks<br ALIGN="LEFT"/>Weeks<br ALIGN="LEFT"/>Years<br ALIGN="LEFT"/>names : list<br ALIGN="LEFT"/>|TFrame(name)<br ALIGN="LEFT"/>TName(tframe)<br ALIGN="LEFT"/>getname(tframe, compression)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzer.TimeFrameAnalyzerBase" [color="black", fontcolor="black", label=<{TimeFrameAnalyzerBase|compression<br ALIGN="LEFT"/>dtcmp : int, NoneType<br ALIGN="LEFT"/>dtcmp1 : NoneType, int<br ALIGN="LEFT"/>dtkey : datetime, date, NoneType<br ALIGN="LEFT"/>dtkey1 : date, NoneType, datetime<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>timeframe<br ALIGN="LEFT"/>|<I>on_dt_over</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.timereturn.TimeReturn" [color="black", fontcolor="black", label=<{TimeReturn|params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>notify_fund(cash, value, fundvalue, shares)<br ALIGN="LEFT"/>on_dt_over()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.timereturn.TimeReturn" [color="black", fontcolor="black", label=<{TimeReturn|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>treturn<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.timer.Timer" [color="black", fontcolor="black", label=<{Timer|SESSION_END<br ALIGN="LEFT"/>SESSION_START<br ALIGN="LEFT"/>SESSION_TIME<br ALIGN="LEFT"/>args : tuple<br ALIGN="LEFT"/>kwargs : dict<br ALIGN="LEFT"/>lastwhen : NoneType, datetime<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|check(dt)<br ALIGN="LEFT"/>start(data)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.trade.Trade" [color="black", fontcolor="black", label=<{Trade|Closed<br ALIGN="LEFT"/>Created<br ALIGN="LEFT"/>Open<br ALIGN="LEFT"/>barclose : int<br ALIGN="LEFT"/>barlen : int<br ALIGN="LEFT"/>baropen : int<br ALIGN="LEFT"/>commission : float<br ALIGN="LEFT"/>data : NoneType<br ALIGN="LEFT"/>dtclose : float<br ALIGN="LEFT"/>dtopen : float<br ALIGN="LEFT"/>history : list<br ALIGN="LEFT"/>historyon : bool<br ALIGN="LEFT"/>isclosed : bool<br ALIGN="LEFT"/>isopen : bool<br ALIGN="LEFT"/>justopened : bool<br ALIGN="LEFT"/>long<br ALIGN="LEFT"/>pnl : float<br ALIGN="LEFT"/>pnlcomm : float<br ALIGN="LEFT"/>price : float<br ALIGN="LEFT"/>ref<br ALIGN="LEFT"/>refbasis : count<br ALIGN="LEFT"/>size : int<br ALIGN="LEFT"/>status<br ALIGN="LEFT"/>status_names : list<br ALIGN="LEFT"/>tradeid : int<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|close_datetime(tz, naive)<br ALIGN="LEFT"/>getdataname()<br ALIGN="LEFT"/>open_datetime(tz, naive)<br ALIGN="LEFT"/>update(order, size, price, value, commission, pnl, comminfo)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.tradeanalyzer.TradeAnalyzer" [color="black", fontcolor="black", label=<{TradeAnalyzer|rets : AutoOrderedDict<br ALIGN="LEFT"/>|create_analysis()<br ALIGN="LEFT"/>notify_trade(trade)<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.trade.TradeHistory" [color="black", fontcolor="black", label=<{TradeHistory|event<br ALIGN="LEFT"/>|datetime(tz, naive)<br ALIGN="LEFT"/>doupdate(order, size, price, commission)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.trades.Trades" [color="black", fontcolor="black", label=<{Trades|lines : tuple<br ALIGN="LEFT"/>params : dict<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>trades : int<br ALIGN="LEFT"/>trades_length : int<br ALIGN="LEFT"/>trades_length_max : int<br ALIGN="LEFT"/>trades_length_min : int<br ALIGN="LEFT"/>trades_long : int<br ALIGN="LEFT"/>trades_loss : int<br ALIGN="LEFT"/>trades_loss_max : int<br ALIGN="LEFT"/>trades_loss_min : int<br ALIGN="LEFT"/>trades_minus : int<br ALIGN="LEFT"/>trades_minus_gross : int<br ALIGN="LEFT"/>trades_plus : int<br ALIGN="LEFT"/>trades_plus_gross : int<br ALIGN="LEFT"/>trades_short : int<br ALIGN="LEFT"/>trades_win : int<br ALIGN="LEFT"/>trades_win_max : int<br ALIGN="LEFT"/>trades_win_min : int<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.tradingcal.TradingCalendar" [color="black", fontcolor="black", label=<{TradingCalendar|params : tuple<br ALIGN="LEFT"/>|schedule(day, tz)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.tradingcal.TradingCalendarBase" [color="black", fontcolor="black", label=<{TradingCalendarBase|<br ALIGN="LEFT"/>|last_monthday(day)<br ALIGN="LEFT"/>last_weekday(day)<br ALIGN="LEFT"/>last_yearday(day)<br ALIGN="LEFT"/>nextday(day)<br ALIGN="LEFT"/>nextday_week(day)<br ALIGN="LEFT"/><I>schedule</I>(day)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.transactions.Transactions" [color="black", fontcolor="black", label=<{Transactions|params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>notify_order(order)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.dema.TripleExponentialMovingAverage" [color="black", fontcolor="black", label=<{TripleExponentialMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.trix.Trix" [color="black", fontcolor="black", label=<{Trix|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.trix.TrixSignal" [color="black", fontcolor="black", label=<{TrixSignal|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.atr.TrueHigh" [color="black", fontcolor="black", label=<{TrueHigh|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.atr.TrueLow" [color="black", fontcolor="black", label=<{TrueLow|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.atr.TrueRange" [color="black", fontcolor="black", label=<{TrueRange|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.tsi.TrueStrengthIndicator" [color="black", fontcolor="black", label=<{TrueStrengthIndicator|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.ultimateoscillator.UltimateOscillator" [color="black", fontcolor="black", label=<{UltimateOscillator|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.UpDay" [color="black", fontcolor="black", label=<{UpDay|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.rsi.UpDayBool" [color="black", fontcolor="black", label=<{UpDayBool|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove.UpMove" [color="black", fontcolor="black", label=<{UpMove|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.brokers.vcbroker.VCBroker" [color="black", fontcolor="black", label=<{VCBroker|cash : float<br ALIGN="LEFT"/>notifs : deque<br ALIGN="LEFT"/>orderbyid : dict<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>positions : defaultdict<br ALIGN="LEFT"/>startingcash : float<br ALIGN="LEFT"/>startingvalue : float<br ALIGN="LEFT"/>store : NoneType<br ALIGN="LEFT"/>trader<br ALIGN="LEFT"/>value : float<br ALIGN="LEFT"/>|OnCancelledOrder(Order)<br ALIGN="LEFT"/>OnChangedBalance(Account)<br ALIGN="LEFT"/><I>OnChangedOpenPositions</I>(Account)<br ALIGN="LEFT"/>OnExecutedOrder(Order, partial)<br ALIGN="LEFT"/><I>OnInternalEvent</I>(p1, p2, p3)<br ALIGN="LEFT"/><I>OnModifiedOrder</I>(Order)<br ALIGN="LEFT"/><I>OnNewClosedOperations</I>(Account)<br ALIGN="LEFT"/><I>OnNewOrderLocation</I>(Order)<br ALIGN="LEFT"/>OnOrderInMarket(Order)<br ALIGN="LEFT"/>OnPartialExecutedOrder(Order)<br ALIGN="LEFT"/><I>OnServerShutDown</I>()<br ALIGN="LEFT"/>OnTotalExecutedOrder(Order)<br ALIGN="LEFT"/>buy(owner, data, size, price, plimit, exectype, valid, tradeid)<br ALIGN="LEFT"/>get_notification()<br ALIGN="LEFT"/>getcash()<br ALIGN="LEFT"/>getcommissioninfo(data)<br ALIGN="LEFT"/>getposition(data, clone)<br ALIGN="LEFT"/>getvalue(datas)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>notify(order)<br ALIGN="LEFT"/>sell(owner, data, size, price, plimit, exectype, valid, tradeid)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>submit(order, vcorder)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.brokers.vcbroker.VCCommInfo" [color="black", fontcolor="black", label=<{VCCommInfo|<br ALIGN="LEFT"/>|getoperationcost(size, price)<br ALIGN="LEFT"/>getvaluesize(size, price)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.vcdata.VCData" [color="black", fontcolor="black", label=<{VCData|MILLISECOND : timedelta<br ALIGN="LEFT"/>NULLDATE : datetime<br ALIGN="LEFT"/>PING_TIMEOUT : float<br ALIGN="LEFT"/>idx : int<br ALIGN="LEFT"/>lastconn<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>q : NoneType<br ALIGN="LEFT"/>qrt : Queue<br ALIGN="LEFT"/>store : NoneType<br ALIGN="LEFT"/>|OnInternalEvent(p1, p2, p3)<br ALIGN="LEFT"/>OnNewDataSerieBar(DataSerie, forcepush)<br ALIGN="LEFT"/>OnNewTicks(ArrayTicks)<br ALIGN="LEFT"/>debug_ticks(ticks)<br ALIGN="LEFT"/>haslivedata()<br ALIGN="LEFT"/>islive()<br ALIGN="LEFT"/>ping()<br ALIGN="LEFT"/>setenvironment(env)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.stores.vcstore.VCStore" [color="black", fontcolor="black", label=<{VCStore|BrokerCls : NoneType<br ALIGN="LEFT"/>CreateObject<br ALIGN="LEFT"/>DataCls : NoneType<br ALIGN="LEFT"/>GetEvents<br ALIGN="LEFT"/>GetModule<br ALIGN="LEFT"/>MAXDATE1<br ALIGN="LEFT"/>MAXDATE2<br ALIGN="LEFT"/>MAXUINT : int<br ALIGN="LEFT"/>VC64_DLLS : tuple<br ALIGN="LEFT"/>VC_BINPATH : str<br ALIGN="LEFT"/>VC_DLLS : tuple<br ALIGN="LEFT"/>VC_KEYNAME : str<br ALIGN="LEFT"/>VC_KEYVAL : str<br ALIGN="LEFT"/>VC_TLIBS : tuple<br ALIGN="LEFT"/>comtypes<br ALIGN="LEFT"/>notifs : deque<br ALIGN="LEFT"/>t_vcconn : NoneType, Thread<br ALIGN="LEFT"/>vcct : NoneType<br ALIGN="LEFT"/>vcctmod : NoneType<br ALIGN="LEFT"/>vcds : NoneType<br ALIGN="LEFT"/>vcdsmod : NoneType<br ALIGN="LEFT"/>vcrt : NoneType<br ALIGN="LEFT"/>vcrtfields : dict<br ALIGN="LEFT"/>vcrtmod : NoneType<br ALIGN="LEFT"/>|connected()<br ALIGN="LEFT"/>find_vchart()<br ALIGN="LEFT"/>get_notifications()<br ALIGN="LEFT"/>getbroker()<br ALIGN="LEFT"/>getdata()<br ALIGN="LEFT"/>put_notification(msg)<br ALIGN="LEFT"/>start(data, broker)<br ALIGN="LEFT"/><I>stop</I>()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.vchartcsv.VChartCSV" [color="black", fontcolor="black", label=<{VChartCSV|DataCls<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.vchartcsv.VChartCSVData" [color="black", fontcolor="black", label=<{VChartCSVData|vctframes : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.vchart.VChartData" [color="black", fontcolor="black", label=<{VChartData|barfmt : str<br ALIGN="LEFT"/>barsize : int<br ALIGN="LEFT"/>dtsize : int<br ALIGN="LEFT"/>ext : str<br ALIGN="LEFT"/>f : NoneType<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.vchart.VChartFeed" [color="black", fontcolor="black", label=<{VChartFeed|DataCls<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.vchartfile.VChartFile" [color="black", fontcolor="black", label=<{VChartFile|f : NoneType<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.stores.vchartfile.VChartFile" [color="black", fontcolor="black", label=<{VChartFile|params : tuple<br ALIGN="LEFT"/>|get_datapath()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.analyzers.vwr.VWR" [color="black", fontcolor="black", label=<{VWR|params : tuple<br ALIGN="LEFT"/>|notify_fund(cash, value, fundvalue, shares)<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.observers.broker.Value" [color="black", fontcolor="black", label=<{Value|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.plot.finance.VolumePlotHandler" [color="black", fontcolor="black", label=<{VolumePlotHandler|barcol : PolyCollection<br ALIGN="LEFT"/>colordown : tuple<br ALIGN="LEFT"/>colorup : tuple<br ALIGN="LEFT"/>edgedown : tuple<br ALIGN="LEFT"/>edgeup : tuple<br ALIGN="LEFT"/>legend_closes : list<br ALIGN="LEFT"/>legend_opens : list<br ALIGN="LEFT"/>legend_vols : list<br ALIGN="LEFT"/>|barcollection(x, opens, closes, vols, width, edgeadjust, vscaling, vbot)<br ALIGN="LEFT"/>legend_artist(legend, orig_handle, fontsize, handlebox)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.vortex.Vortex" [color="black", fontcolor="black", label=<{Vortex|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.contrib.vortex.Vortex" [color="black", fontcolor="black", label=<{Vortex|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.basicops.WeightedAverage" [color="black", fontcolor="black", label=<{WeightedAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.wma.WeightedMovingAverage" [color="black", fontcolor="black", label=<{WeightedMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.plot.multicursor.Widget" [color="black", fontcolor="black", label=<{Widget|active<br ALIGN="LEFT"/>drawon : bool<br ALIGN="LEFT"/>eventson : bool<br ALIGN="LEFT"/>|get_active()<br ALIGN="LEFT"/>ignore(event)<br ALIGN="LEFT"/>set_active(active)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.williams.WilliamsAD" [color="black", fontcolor="black", label=<{WilliamsAD|lines : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.williams.WilliamsR" [color="black", fontcolor="black", label=<{WilliamsR|lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.writer.WriterBase" [color="black", fontcolor="black", label=<{WriterBase|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.writer.WriterFile" [color="black", fontcolor="black", label=<{WriterFile|close_out : bool<br ALIGN="LEFT"/>headers : list<br ALIGN="LEFT"/>out : TextIOWrapper<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>values : list<br ALIGN="LEFT"/>|addheaders(headers)<br ALIGN="LEFT"/>addvalues(values)<br ALIGN="LEFT"/>next()<br ALIGN="LEFT"/>start()<br ALIGN="LEFT"/>stop()<br ALIGN="LEFT"/>writedict(dct, level, recurse)<br ALIGN="LEFT"/>writeiterable(iterable, func, counter)<br ALIGN="LEFT"/>writeline(line)<br ALIGN="LEFT"/>writelines(lines)<br ALIGN="LEFT"/>writelineseparator(level)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.writer.WriterStringIO" [color="black", fontcolor="black", label=<{WriterStringIO|out<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|stop()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.yahoo.YahooFinance" [color="black", fontcolor="black", label=<{YahooFinance|DataCls<br ALIGN="LEFT"/>params<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.yahoo.YahooFinanceCSV" [color="black", fontcolor="black", label=<{YahooFinanceCSV|DataCls<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.feeds.yahoo.YahooFinanceCSVData" [color="black", fontcolor="black", label=<{YahooFinanceCSVData|f : StringIO<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.yahoo.YahooFinanceData" [color="black", fontcolor="black", label=<{YahooFinanceData|error : NoneType, str<br ALIGN="LEFT"/>f : StringIO, NoneType<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|start()<br ALIGN="LEFT"/>start_v7()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.feeds.yahoo.YahooLegacyCSV" [color="black", fontcolor="black", label=<{YahooLegacyCSV|params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.zlema.ZeroLagExponentialMovingAverage" [color="black", fontcolor="black", label=<{ZeroLagExponentialMovingAverage|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.zlind.ZeroLagIndicator" [color="black", fontcolor="black", label=<{ZeroLagIndicator|alias : tuple<br ALIGN="LEFT"/>ema<br ALIGN="LEFT"/>limits : list<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.aroon._AroonBase" [color="black", fontcolor="black", label=<{_AroonBase|down<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>up<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.dataseries._Bar" [color="black", fontcolor="black", label=<{_Bar|MAXDATE<br ALIGN="LEFT"/>close : float<br ALIGN="LEFT"/>datetime : NoneType<br ALIGN="LEFT"/>high : float<br ALIGN="LEFT"/>low : float<br ALIGN="LEFT"/>open : float<br ALIGN="LEFT"/>openinterest : float<br ALIGN="LEFT"/>replaying : bool<br ALIGN="LEFT"/>volume : float<br ALIGN="LEFT"/>|bstart(maxdate)<br ALIGN="LEFT"/>bupdate(data, reopen)<br ALIGN="LEFT"/>isopen()<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.resamplerfilter._BaseResampler" [color="black", fontcolor="black", label=<{_BaseResampler|bar : _Bar<br ALIGN="LEFT"/>compcount : int<br ALIGN="LEFT"/>componly<br ALIGN="LEFT"/>data<br ALIGN="LEFT"/>doadjusttime<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>subdays<br ALIGN="LEFT"/>subweeks<br ALIGN="LEFT"/>|check(data, _forcedata)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.crossover._CrossBase" [color="black", fontcolor="black", label=<{_CrossBase|lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.directionalmove._DirectionalIndicator" [color="black", fontcolor="black", label=<{_DirectionalIndicator|DIminus<br ALIGN="LEFT"/>DIplus<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.envelope._EnvelopeBase" [color="black", fontcolor="black", label=<{_EnvelopeBase|lines : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.linebuffer._LineDelay" [color="black", fontcolor="black", label=<{_LineDelay|a<br ALIGN="LEFT"/>ago<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.linebuffer._LineForward" [color="black", fontcolor="black", label=<{_LineForward|a<br ALIGN="LEFT"/>ago<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.utils.dateintern._LocalTimezone" [color="black", fontcolor="black", label=<{_LocalTimezone|<br ALIGN="LEFT"/>|dst(dt)<br ALIGN="LEFT"/>localize(dt)<br ALIGN="LEFT"/>tzname(dt)<br ALIGN="LEFT"/>utcoffset(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.talib._MetaTALibIndicator" [color="black", fontcolor="black", label=<{_MetaTALibIndicator|<br ALIGN="LEFT"/>|dopostinit(_obj)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.priceoscillator._PriceOscBase" [color="black", fontcolor="black", label=<{_PriceOscBase|ma1<br ALIGN="LEFT"/>ma2<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.psar._SarStatus" [color="black", fontcolor="black", label=<{_SarStatus|af : float<br ALIGN="LEFT"/>ep : float<br ALIGN="LEFT"/>sar : NoneType<br ALIGN="LEFT"/>tr : NoneType<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.indicators.stochastic._StochasticBase" [color="black", fontcolor="black", label=<{_StochasticBase|d<br ALIGN="LEFT"/>k<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.stores.vcstore._SymInfo" [color="black", fontcolor="black", label=<{_SymInfo|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.talib._TALibIndicator" [color="black", fontcolor="black", label=<{_TALibIndicator|CANDLEOVER : float<br ALIGN="LEFT"/>CANDLEREF : int<br ALIGN="LEFT"/>|next()<br ALIGN="LEFT"/>once(start, end)<br ALIGN="LEFT"/><I>oncestart</I>(start, end)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.utils.dateintern._UTC" [color="black", fontcolor="black", label=<{_UTC|<br ALIGN="LEFT"/>|dst(dt)<br ALIGN="LEFT"/>localize(dt)<br ALIGN="LEFT"/>tzname(dt)<br ALIGN="LEFT"/>utcoffset(dt)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.utils.flushfile.flushfile" [color="black", fontcolor="black", label=<{flushfile|f<br ALIGN="LEFT"/>|flush()<br ALIGN="LEFT"/>write(x)<br ALIGN="LEFT"/>}>, shape="record", style="solid"];
"backtrader.indicators.hadelta.haDelta" [color="black", fontcolor="black", label=<{haDelta|alias : tuple<br ALIGN="LEFT"/>lines : tuple<br ALIGN="LEFT"/>params : tuple<br ALIGN="LEFT"/>plotinfo : dict<br ALIGN="LEFT"/>plotlines : dict<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.utils.py3.with_metaclass.metaclass" [color="black", fontcolor="black", label=<{metaclass|<br ALIGN="LEFT"/>|}>, shape="record", style="solid"];
"backtrader.analyzer.MetaTimeFrameAnalyzerBase" -> "backtrader.analyzer.MetaAnalyzer" [arrowhead="empty", arrowtail="none"];
"backtrader.analyzers.sharpe.SharpeRatio_A" -> "backtrader.analyzers.sharpe.SharpeRatio" [arrowhead="empty", arrowtail="none"];
"backtrader.comminfo.CommissionInfo" -> "backtrader.comminfo.CommInfoBase" [arrowhead="empty", arrowtail="none"];
"backtrader.commissions.CommInfo_Futures_Fixed" -> "backtrader.commissions.CommInfo_Futures" [arrowhead="empty", arrowtail="none"];
"backtrader.commissions.CommInfo_Futures_Perc" -> "backtrader.commissions.CommInfo_Futures" [arrowhead="empty", arrowtail="none"];
"backtrader.commissions.CommInfo_Stocks_Fixed" -> "backtrader.commissions.CommInfo_Stocks" [arrowhead="empty", arrowtail="none"];
"backtrader.commissions.CommInfo_Stocks_Perc" -> "backtrader.commissions.CommInfo_Stocks" [arrowhead="empty", arrowtail="none"];
"backtrader.dataseries.OHLC" -> "backtrader.dataseries.DataSeries" [arrowhead="empty", arrowtail="none"];
"backtrader.dataseries.OHLCDateTime" -> "backtrader.dataseries.OHLC" [arrowhead="empty", arrowtail="none"];
"backtrader.errors.FromModuleImportError" -> "backtrader.errors.ModuleImportError" [arrowhead="empty", arrowtail="none"];
"backtrader.errors.ModuleImportError" -> "backtrader.errors.BacktraderError" [arrowhead="empty", arrowtail="none"];
"backtrader.errors.StrategySkipError" -> "backtrader.errors.BacktraderError" [arrowhead="empty", arrowtail="none"];
"backtrader.feed.CSVFeedBase" -> "backtrader.feed.FeedBase" [arrowhead="empty", arrowtail="none"];
"backtrader.feed.DataBase" -> "backtrader.feed.AbstractDataBase" [arrowhead="empty", arrowtail="none"];
"backtrader.feed.DataClone" -> "backtrader.feed.AbstractDataBase" [arrowhead="empty", arrowtail="none"];
"backtrader.feeds.mt4csv.MT4CSVData" -> "backtrader.feeds.csvgeneric.GenericCSVData" [arrowhead="empty", arrowtail="none"];
"backtrader.feeds.quandl.Quandl" -> "backtrader.feeds.quandl.QuandlCSV" [arrowhead="empty", arrowtail="none"];
"backtrader.feeds.sierrachart.SierraChartCSVData" -> "backtrader.feeds.csvgeneric.GenericCSVData" [arrowhead="empty", arrowtail="none"];
"backtrader.feeds.yahoo.YahooFinanceData" -> "backtrader.feeds.yahoo.YahooFinanceCSVData" [arrowhead="empty", arrowtail="none"];
"backtrader.feeds.yahoo.YahooLegacyCSV" -> "backtrader.feeds.yahoo.YahooFinanceCSVData" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.All" -> "backtrader.functions.MultiLogic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.And" -> "backtrader.functions.MultiLogicReduce" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Any" -> "backtrader.functions.MultiLogic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Cmp" -> "backtrader.functions.Logic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.CmpEx" -> "backtrader.functions.Logic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.DivByZero" -> "backtrader.functions.Logic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.DivZeroByZero" -> "backtrader.functions.Logic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.If" -> "backtrader.functions.Logic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Max" -> "backtrader.functions.MultiLogic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Min" -> "backtrader.functions.MultiLogic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.MultiLogic" -> "backtrader.functions.Logic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.MultiLogicReduce" -> "backtrader.functions.MultiLogic" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Or" -> "backtrader.functions.MultiLogicReduce" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Reduce" -> "backtrader.functions.MultiLogicReduce" [arrowhead="empty", arrowtail="none"];
"backtrader.functions.Sum" -> "backtrader.functions.MultiLogic" [arrowhead="empty", arrowtail="none"];
"backtrader.indicator.MtLinePlotterIndicator" -> "backtrader.indicator.MetaIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonDown" -> "backtrader.indicators.aroon._AroonBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonOscillator" -> "backtrader.indicators.aroon._AroonBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonUp" -> "backtrader.indicators.aroon._AroonBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonUpDown" -> "backtrader.indicators.aroon.AroonDown" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonUpDown" -> "backtrader.indicators.aroon.AroonUp" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonUpDownOscillator" -> "backtrader.indicators.aroon.AroonOscillator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.aroon.AroonUpDownOscillator" -> "backtrader.indicators.aroon.AroonUpDown" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.AllN" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.AnyN" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.ApplyN" -> "backtrader.indicators.basicops.BaseApplyN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.Average" -> "backtrader.indicators.basicops.PeriodN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.BaseApplyN" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.ExponentialSmoothing" -> "backtrader.indicators.basicops.Average" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.ExponentialSmoothingDynamic" -> "backtrader.indicators.basicops.ExponentialSmoothing" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.FindFirstIndex" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.FindFirstIndexHighest" -> "backtrader.indicators.basicops.FindFirstIndex" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.FindFirstIndexLowest" -> "backtrader.indicators.basicops.FindFirstIndex" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.FindLastIndex" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.FindLastIndexHighest" -> "backtrader.indicators.basicops.FindLastIndex" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.FindLastIndexLowest" -> "backtrader.indicators.basicops.FindLastIndex" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.Highest" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.Lowest" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.OperationN" -> "backtrader.indicators.basicops.PeriodN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.ReduceN" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.SumN" -> "backtrader.indicators.basicops.OperationN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.basicops.WeightedAverage" -> "backtrader.indicators.basicops.PeriodN" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.bollinger.BollingerBandsPct" -> "backtrader.indicators.bollinger.BollingerBands" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.crossover.CrossDown" -> "backtrader.indicators.crossover._CrossBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.crossover.CrossUp" -> "backtrader.indicators.crossover._CrossBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.AverageDirectionalMovementIndex" -> "backtrader.indicators.directionalmove._DirectionalIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.AverageDirectionalMovementIndexRating" -> "backtrader.indicators.directionalmove.AverageDirectionalMovementIndex" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.DirectionalIndicator" -> "backtrader.indicators.directionalmove._DirectionalIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.DirectionalMovement" -> "backtrader.indicators.directionalmove.AverageDirectionalMovementIndexRating" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.DirectionalMovement" -> "backtrader.indicators.directionalmove.DirectionalIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.DirectionalMovementIndex" -> "backtrader.indicators.directionalmove.AverageDirectionalMovementIndex" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.DirectionalMovementIndex" -> "backtrader.indicators.directionalmove.DirectionalIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.MinusDirectionalIndicator" -> "backtrader.indicators.directionalmove._DirectionalIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.directionalmove.PlusDirectionalIndicator" -> "backtrader.indicators.directionalmove._DirectionalIndicator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.envelope.Envelope" -> "backtrader.indicators.envelope.EnvelopeMixIn" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.envelope.Envelope" -> "backtrader.indicators.envelope._EnvelopeBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.mabase.MovAv" -> "backtrader.indicators.mabase.MovingAverage" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.macd.MACDHisto" -> "backtrader.indicators.macd.MACD" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.priceoscillator.PercentagePriceOscillator" -> "backtrader.indicators.priceoscillator._PriceOscBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.priceoscillator.PercentagePriceOscillatorShort" -> "backtrader.indicators.priceoscillator.PercentagePriceOscillator" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.priceoscillator.PriceOscillator" -> "backtrader.indicators.priceoscillator._PriceOscBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.stochastic.Stochastic" -> "backtrader.indicators.stochastic._StochasticBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.stochastic.StochasticFast" -> "backtrader.indicators.stochastic._StochasticBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.stochastic.StochasticFull" -> "backtrader.indicators.stochastic._StochasticBase" [arrowhead="empty", arrowtail="none"];
"backtrader.indicators.trix.TrixSignal" -> "backtrader.indicators.trix.Trix" [arrowhead="empty", arrowtail="none"];
"backtrader.linebuffer.LineOwnOperation" -> "backtrader.linebuffer.LineActions" [arrowhead="empty", arrowtail="none"];
"backtrader.linebuffer.LinesOperation" -> "backtrader.linebuffer.LineActions" [arrowhead="empty", arrowtail="none"];
"backtrader.linebuffer._LineDelay" -> "backtrader.linebuffer.LineActions" [arrowhead="empty", arrowtail="none"];
"backtrader.linebuffer._LineForward" -> "backtrader.linebuffer.LineActions" [arrowhead="empty", arrowtail="none"];
"backtrader.lineiterator.DataAccessor" -> "backtrader.lineiterator.LineIterator" [arrowhead="empty", arrowtail="none"];
"backtrader.lineiterator.IndicatorBase" -> "backtrader.lineiterator.DataAccessor" [arrowhead="empty", arrowtail="none"];
"backtrader.lineiterator.MultiCoupler" -> "backtrader.lineiterator.LineIterator" [arrowhead="empty", arrowtail="none"];
"backtrader.lineiterator.ObserverBase" -> "backtrader.lineiterator.DataAccessor" [arrowhead="empty", arrowtail="none"];
"backtrader.lineiterator.StrategyBase" -> "backtrader.lineiterator.DataAccessor" [arrowhead="empty", arrowtail="none"];
"backtrader.lineroot.LineMultiple" -> "backtrader.lineroot.LineRoot" [arrowhead="empty", arrowtail="none"];
"backtrader.lineroot.LineSingle" -> "backtrader.lineroot.LineRoot" [arrowhead="empty", arrowtail="none"];
"backtrader.lineseries.LineSeriesStub" -> "backtrader.lineseries.LineSeries" [arrowhead="empty", arrowtail="none"];
"backtrader.metabase.MetaParams" -> "backtrader.metabase.MetaBase" [arrowhead="empty", arrowtail="none"];
"backtrader.observers.logreturns.LogReturns2" -> "backtrader.observers.logreturns.LogReturns" [arrowhead="empty", arrowtail="none"];
"backtrader.order.BuyOrder" -> "backtrader.order.Order" [arrowhead="empty", arrowtail="none"];
"backtrader.order.Order" -> "backtrader.order.OrderBase" [arrowhead="empty", arrowtail="none"];
"backtrader.order.SellOrder" -> "backtrader.order.Order" [arrowhead="empty", arrowtail="none"];
"backtrader.order.StopBuyOrder" -> "backtrader.order.BuyOrder" [arrowhead="empty", arrowtail="none"];
"backtrader.order.StopLimitBuyOrder" -> "backtrader.order.BuyOrder" [arrowhead="empty", arrowtail="none"];
"backtrader.order.StopLimitSellOrder" -> "backtrader.order.SellOrder" [arrowhead="empty", arrowtail="none"];
"backtrader.order.StopSellOrder" -> "backtrader.order.SellOrder" [arrowhead="empty", arrowtail="none"];
"backtrader.plot.multicursor.MultiCursor" -> "backtrader.plot.multicursor.Widget" [arrowhead="empty", arrowtail="none"];
"backtrader.plot.multicursor.MultiCursor2" -> "backtrader.plot.multicursor.Widget" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.Replayer" -> "backtrader.resamplerfilter._BaseResampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ReplayerDaily" -> "backtrader.resamplerfilter.Replayer" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ReplayerMinutes" -> "backtrader.resamplerfilter.Replayer" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ReplayerMonthly" -> "backtrader.resamplerfilter.Replayer" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ReplayerSeconds" -> "backtrader.resamplerfilter.Replayer" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ReplayerTicks" -> "backtrader.resamplerfilter.Replayer" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ReplayerWeekly" -> "backtrader.resamplerfilter.Replayer" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.Resampler" -> "backtrader.resamplerfilter._BaseResampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerDaily" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerMinutes" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerMonthly" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerSeconds" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerTicks" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerWeekly" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.resamplerfilter.ResamplerYearly" -> "backtrader.resamplerfilter.Resampler" [arrowhead="empty", arrowtail="none"];
"backtrader.sizers.percents_sizer.AllInSizer" -> "backtrader.sizers.percents_sizer.PercentSizer" [arrowhead="empty", arrowtail="none"];
"backtrader.sizers.percents_sizer.AllInSizerInt" -> "backtrader.sizers.percents_sizer.PercentSizerInt" [arrowhead="empty", arrowtail="none"];
"backtrader.sizers.percents_sizer.PercentSizerInt" -> "backtrader.sizers.percents_sizer.PercentSizer" [arrowhead="empty", arrowtail="none"];
"backtrader.stores.vchartfile.VChartFile" -> "backtrader.store.Store" [arrowhead="empty", arrowtail="none"];
"backtrader.strategy.MetaSigStrategy" -> "backtrader.strategy.MetaStrategy" [arrowhead="empty", arrowtail="none"];
"backtrader.tradingcal.PandasMarketCalendar" -> "backtrader.tradingcal.TradingCalendarBase" [arrowhead="empty", arrowtail="none"];
"backtrader.tradingcal.TradingCalendar" -> "backtrader.tradingcal.TradingCalendarBase" [arrowhead="empty", arrowtail="none"];
"backtrader.writer.WriterFile" -> "backtrader.writer.WriterBase" [arrowhead="empty", arrowtail="none"];
"backtrader.writer.WriterStringIO" -> "backtrader.writer.WriterFile" [arrowhead="empty", arrowtail="none"];
"backtrader.analyzers.annualreturn.AnnualReturn" -> "backtrader.analyzers.sharpe.SharpeRatio" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="anret", style="solid"];
"backtrader.analyzers.drawdown.TimeDrawDown" -> "backtrader.analyzers.calmar.Calmar" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_maxdd", style="solid"];
"backtrader.analyzers.leverage.GrossLeverage" -> "backtrader.analyzers.pyfolio.PyFolio" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_gross_lev", style="solid"];
"backtrader.analyzers.positions.PositionsValue" -> "backtrader.analyzers.pyfolio.PyFolio" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_positions", style="solid"];
"backtrader.analyzers.returns.Returns" -> "backtrader.analyzers.vwr.VWR" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_returns", style="solid"];
"backtrader.analyzers.timereturn.TimeReturn" -> "backtrader.analyzers.periodstats.PeriodStats" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_tr", style="solid"];
"backtrader.analyzers.timereturn.TimeReturn" -> "backtrader.analyzers.pyfolio.PyFolio" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_returns", style="solid"];
"backtrader.analyzers.timereturn.TimeReturn" -> "backtrader.analyzers.sharpe.SharpeRatio" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="timereturn", style="solid"];
"backtrader.analyzers.transactions.Transactions" -> "backtrader.analyzers.pyfolio.PyFolio" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_transactions", style="solid"];
"backtrader.feeds.btcsv.BacktraderCSVData" -> "backtrader.feeds.btcsv.BacktraderCSV" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DataCls", style="solid"];
"backtrader.feeds.csvgeneric.GenericCSVData" -> "backtrader.feeds.csvgeneric.GenericCSV" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DataCls", style="solid"];
"backtrader.feeds.vchart.VChartData" -> "backtrader.feeds.vchart.VChartFeed" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DataCls", style="solid"];
"backtrader.feeds.vchartcsv.VChartCSVData" -> "backtrader.feeds.vchartcsv.VChartCSV" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DataCls", style="solid"];
"backtrader.feeds.yahoo.YahooFinanceCSVData" -> "backtrader.feeds.yahoo.YahooFinanceCSV" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DataCls", style="solid"];
"backtrader.feeds.yahoo.YahooFinanceData" -> "backtrader.feeds.yahoo.YahooFinance" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="DataCls", style="solid"];
"backtrader.order.OrderData" -> "backtrader.order.OrderBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="created", style="solid"];
"backtrader.order.OrderData" -> "backtrader.order.OrderBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="executed", style="solid"];
"backtrader.order.OrderData" -> "backtrader.order.OrderBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="executed", style="solid"];
"backtrader.plot.plot.PInfo" -> "backtrader.plot.plot.Plot_OldSync" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="pinf", style="solid"];
"backtrader.stores.oandastore.API" -> "backtrader.stores.oandastore.OandaStore" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="oapi", style="solid"];
"backtrader.tradingcal.PandasMarketCalendar" -> "backtrader.feed.AbstractDataBase" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="_calendar", style="solid"];
"backtrader.utils.flushfile.StdOutDevNull" -> "backtrader.utils.flushfile.StdOutDevNull" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdout", style="solid"];
"backtrader.utils.flushfile.StdOutDevNull" -> "backtrader.writer.WriterFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out", style="solid"];
"backtrader.utils.flushfile.flushfile" -> "backtrader.utils.flushfile.StdOutDevNull" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="stdout", style="solid"];
"backtrader.utils.flushfile.flushfile" -> "backtrader.writer.WriterFile" [arrowhead="diamond", arrowtail="none", fontcolor="green", label="out", style="solid"];
"backtrader.resamplerfilter.DTFaker" -> "backtrader.resamplerfilter.DTFaker" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="datetime", style="solid"];
"backtrader.resamplerfilter.DTFaker" -> "backtrader.resamplerfilter.DTFaker" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="p", style="solid"];
"backtrader.tradingcal.PandasMarketCalendar" -> "backtrader.cerebro.Cerebro" [arrowhead="odiamond", arrowtail="none", fontcolor="green", label="_tradingcal", style="solid"];
}
